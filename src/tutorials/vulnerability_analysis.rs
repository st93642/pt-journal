pub const VULNERABILITY_ANALYSIS_STEPS: &[(&str, &str)] = &[
    (
        "Framework mapping to CVEs",
        "OBJECTIVE: Map identified technologies and versions to known vulnerabilities.

STEP-BY-STEP PROCESS:
1. Technology inventory review:
   - Compile list of all identified technologies
   - Include versions where available
   - Note operating systems, frameworks, libraries

2. Vulnerability database research:
   - Search NVD (NIST): https://nvd.nist.gov/
   - Check Exploit-DB: https://www.exploit-db.com/
   - Review vendor security advisories

3. CVE analysis:
   - Identify CVEs affecting discovered versions
   - Assess exploitability in target environment
   - Check for proof-of-concept exploits

4. Risk prioritization:
   - Score vulnerabilities using CVSS
   - Consider exploitability factors
   - Assess business impact

5. Documentation:
   - Create vulnerability matrix
   - Include CVE details and references
   - Document affected systems and components

WHAT TO LOOK FOR:
- Critical and high-severity vulnerabilities
- Recently disclosed vulnerabilities (zero-days)
- Vulnerabilities with public exploits
- End-of-life software versions

COMMON PITFALLS:
- Not all vulnerabilities are exploitable in every environment
- Some vendors dispute or downplay reported vulnerabilities
- Patch levels may not match public version numbers
- Some systems use backported security fixes"
    ),
    (
        "Parameter testing",
        "OBJECTIVE: Test input parameters for common web vulnerabilities.

STEP-BY-STEP PROCESS:
1. SQL injection testing:
   - Test all input parameters with SQL payloads
   - Use sqlmap: sqlmap -u \"https://target.com/page?id=1\" --batch
   - Check for error-based, blind, and time-based injection

2. XSS testing:
   - Test reflected XSS: <script>alert(1)</script>
   - Test stored XSS in forms and comments
   - Check DOM-based XSS in client-side code

3. Command injection:
   - Test system command execution in input fields
   - Check for shell metacharacter injection
   - Test file inclusion vulnerabilities

4. Other injection types:
   - LDAP injection in login forms
   - XPath injection in XML processing
   - NoSQL injection in MongoDB applications

5. Input validation bypass:
   - Test encoding bypasses (URL encoding, HTML encoding)
   - Check for parameter pollution
   - Test multipart form boundaries

WHAT TO LOOK FOR:
- Unescaped user input in database queries
- Reflected user input in HTML output
- Command execution through user-controlled input
- File inclusion vulnerabilities

COMMON PITFALLS:
- Some applications use prepared statements or ORM
- WAFs may block obvious payloads
- Some injection requires specific syntax
- Context matters (HTML vs JavaScript vs SQL)"
    ),
    (
        "Authentication analysis",
        "OBJECTIVE: Evaluate the security of authentication and session management mechanisms.

STEP-BY-STEP PROCESS:
1. Authentication mechanism review:
   - Identify authentication methods (forms, SSO, MFA)
   - Check password policies and complexity requirements
   - Test account lockout mechanisms

2. Session management testing:
   - Check for secure cookie flags (HttpOnly, Secure, SameSite)
   - Test session fixation vulnerabilities
   - Verify session timeout and invalidation

3. Password security assessment:
   - Test for weak password acceptance
   - Check password reset functionality
   - Verify password storage security (if accessible)

4. Multi-factor authentication:
   - Test MFA implementation and bypass attempts
   - Check for MFA fatigue attacks
   - Verify backup authentication methods

5. Authorization testing:
   - Test horizontal privilege escalation
   - Check vertical privilege escalation
   - Verify role-based access controls

WHAT TO LOOK FOR:
- Weak password requirements
- Session cookies without security flags
- Password reset vulnerabilities
- Missing or weak MFA implementation
- Insecure direct object references (IDOR)

COMMON PITFALLS:
- Some authentication is handled by third parties
- Internal applications may have weaker controls
- Session management may be handled by frameworks
- Some systems use non-standard authentication flows"
    ),
    (
        "Access control testing",
        "OBJECTIVE: Verify that users can only access resources they are authorized for.

STEP-BY-STEP PROCESS:
1. Role definition and testing:
   - Identify different user roles and permissions
   - Test each role's access to different resources
   - Check for role-based access control (RBAC)

2. Horizontal privilege escalation:
   - Attempt to access other users' data
   - Test IDOR vulnerabilities
   - Check for insecure direct object references

3. Vertical privilege escalation:
   - Attempt to gain higher privileges
   - Test admin function access from user accounts
   - Check for privilege escalation through misconfigurations

4. Business logic testing:
   - Test workflow bypasses
   - Check for logic flaws in access controls
   - Verify state transitions and permissions

5. API authorization:
   - Test API endpoints for proper authorization
   - Check for JWT token vulnerabilities
   - Verify API key and token security

WHAT TO LOOK FOR:
- Users accessing data they shouldn't see
- Admin functions accessible to regular users
- API endpoints without proper authentication
- Business logic flaws allowing unauthorized access

COMMON PITFALLS:
- Some access controls are enforced at the UI level only
- APIs may have different authorization than web interface
- Some applications use complex permission matrices
- Access controls may be bypassed through race conditions"
    ),
    (
        "Common vulnerability sweeps",
        "OBJECTIVE: Perform broad scanning for common vulnerabilities across all discovered assets.

STEP-BY-STEP PROCESS:
1. Automated vulnerability scanning:
   - Use OpenVAS or Nessus for comprehensive scanning
   - Nuclei for template-based vulnerability detection
   - Nikto for web server vulnerability scanning

2. Web application scanning:
   - OWASP ZAP or Burp Suite active scanning
   - SQLMap for automated SQL injection testing
   - Dirbuster for directory and file enumeration

3. Network vulnerability assessment:
   - Nmap vulnerability scripts
   - Test for common misconfigurations
   - Check for default credentials

4. Configuration review:
   - Check for security headers (CSP, HSTS, X-Frame-Options)
   - Verify SSL/TLS configurations
   - Test for information disclosure

5. Manual verification:
   - Verify automated findings
   - Test for bypass techniques
   - Document false positives and confirmed vulnerabilities

WHAT TO LOOK FOR:
- Outdated software with known vulnerabilities
- Misconfigurations and default settings
- Missing security controls
- Information disclosure issues

COMMON PITFALLS:
- Automated scanners produce false positives
- Some vulnerabilities require specific conditions
- Scanners may miss custom application logic issues
- Rate limiting can prevent thorough scanning"
    ),
];