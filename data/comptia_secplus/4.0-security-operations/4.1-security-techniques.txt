# Domain 4.0 - Security Operations
# Subdomain 4.1 - Security Techniques for Computing Resources
# Format: question|answer_a|answer_b|answer_c|answer_d|correct_idx|explanation|domain|subdomain

What is a security baseline?|Maximum security configuration|Minimum security configuration standard|Average security level|No security requirements|1|A security baseline establishes the minimum security configuration standard that all systems must meet. It defines required security controls, settings, and patches. It's not maximum (which may be impractical), average (which varies), or no requirements.|4.0 Security Operations|4.1 Security Techniques

Which hardening technique removes unnecessary software and services?|Adding features|Attack surface reduction|Installing all available packages|Enabling all services|1|Attack surface reduction removes unnecessary software, services, ports, and features to minimize potential entry points for attackers. Installing everything or enabling all services increases attack surface, which is opposite of hardening.|4.0 Security Operations|4.1 Security Techniques

What mobile device management (MDM) feature can remotely erase a lost device?|Geofencing|Remote wipe|App whitelisting|Containerization|1|Remote wipe allows administrators to remotely erase all data from a lost or stolen device to prevent data compromise. Geofencing creates location boundaries, whitelisting controls apps, and containerization separates work/personal data.|4.0 Security Operations|4.1 Security Techniques

Which wireless security protocol is currently considered most secure for Wi-Fi networks?|WEP|WPA|WPA2|WPA3|3|WPA3 is the most current and secure Wi-Fi security protocol, improving on WPA2 with stronger encryption and protection against offline dictionary attacks. WEP and WPA are deprecated due to vulnerabilities, and WPA2, while still widely used, is less secure than WPA3.|4.0 Security Operations|4.1 Security Techniques

What is the purpose of application sandboxing?|Speed up applications|Isolate applications to limit damage from vulnerabilities|Share resources between apps|Encrypt application data|1|Sandboxing isolates applications in restricted environments to limit damage if vulnerabilities are exploited. Compromised sandboxed apps can't easily access system resources or other applications. It doesn't primarily speed apps, share resources, or handle encryption.|4.0 Security Operations|4.1 Security Techniques

Which authentication protocol is commonly used with RADIUS for wireless networks?|Kerberos|802.1X|NTLM|SAML|1|802.1X is a port-based network access control protocol commonly used with RADIUS for wireless network authentication. It provides secure authentication before granting network access. Kerberos is for domain authentication, NTLM is legacy Windows authentication, and SAML is for federation.|4.0 Security Operations|4.1 Security Techniques

What security technique runs applications in controlled test environments?|Production deployment|Sandboxing|Live testing|Direct installation|1|Sandboxing runs applications in isolated, controlled environments to observe behavior without risking production systems. Production deployment is live, live testing risks production, and direct installation doesn't provide isolation.|4.0 Security Operations|4.1 Security Techniques

Which mobile deployment model gives employees device choice but requires security controls?|BYOD (Bring Your Own Device)|COPE (Corporate-Owned, Personally Enabled)|CYOD (Choose Your Own Device)|Company-owned only|0|BYOD allows employees to use personal devices for work, requiring MDM and security controls to protect company data. COPE provides corporate devices for personal use, CYOD offers corporate device choices, and company-owned prohibits personal devices.|4.0 Security Operations|4.1 Security Techniques

What does full device encryption (FDE) protect against?|Network attacks|Data access if device is physically stolen|Malware infections|Phishing attacks|1|Full Device Encryption (FDE) encrypts all data on a device, protecting against data access if the device is physically stolen or lost. It doesn't directly protect against network attacks, malware, or phishing—those require other controls.|4.0 Security Operations|4.1 Security Techniques

Which technique separates work and personal data on mobile devices?|Encryption|Containerization|Antivirus|VPN|1|Containerization creates separate, isolated spaces for work and personal data on mobile devices. Work containers are managed and secured by organization, while personal data remains private. Encryption protects data but doesn't separate, antivirus fights malware, and VPN secures connections.|4.0 Security Operations|4.1 Security Techniques
Which hardening technique disables unnecessary services that could become attack vectors?|Installing all services|Service minimization|Enabling default services|Activating remote services|1|Service minimization disables unnecessary services, ports, and protocols to reduce the attack surface. Each running service is a potential entry point for attackers. Default services often include unnecessary components (like print spooler on servers that don't print). Organizations should enable only services required for business functions, following the principle of least functionality. Examples: disable Telnet/FTP if using SSH/SFTP, disable SMBv1 due to WannaCry vulnerability, disable unnecessary RPC services.|4.0|4.1
What CIS (Center for Internet Security) resource provides detailed hardening guidelines for operating systems and applications?|Vulnerability database|CIS Benchmarks|Threat intelligence feed|Antivirus signatures|1|CIS Benchmarks are consensus-driven security configuration guidelines for over 100 technologies including Windows, Linux, databases, cloud platforms, and network devices. They provide detailed step-by-step hardening instructions with two levels: Level 1 (basic security, minimal functionality impact) and Level 2 (defense-in-depth, may reduce functionality). Benchmarks are free, community-developed, and widely adopted. Similar resources include DISA STIGs (Security Technical Implementation Guides) for DoD systems and vendor-specific hardening guides.|4.0|4.1
Which Windows Group Policy setting enforces password complexity requirements centrally?|Local security policy only|Domain Group Policy Object (GPO)|Individual user settings|Application-level controls|1|Group Policy Objects (GPOs) in Active Directory centrally enforce security settings across all domain computers including password policies (complexity, length, history, age), account lockout policies, audit policies, software installation, firewall rules, and user rights assignments. GPOs override local settings, ensuring consistent security baseline. Administrators link GPOs to OUs (Organizational Units) for targeted application. GPO precedence: Local → Site → Domain → OU (LSDOU), with later policies overriding earlier ones. Tools: gpupdate /force to apply immediately, gpresult to verify applied policies.|4.0|4.1
What patch management strategy tests updates in isolated environment before production deployment?|Immediate auto-deployment|Staged rollout with testing|Skip testing for speed|Deploy only to critical systems|1|Staged rollout tests patches in dev/test environments before production deployment, identifying compatibility issues, performance impacts, or bugs that could disrupt operations. Typical stages: (1) Test lab validation, (2) Pilot group deployment (limited users/systems), (3) Phased production rollout, (4) Full deployment. This balances security urgency against stability. Critical zero-day exploits may require faster deployment. Tools: WSUS (Windows Server Update Services), SCCM (System Center Configuration Manager), patch management platforms like Ivanti, ManageEngine. Document rollback procedures for each patch.|4.0|4.1
Which mobile device deployment model provides corporate-owned devices for both work and limited personal use?|BYOD (Bring Your Own Device)|COPE (Corporate-Owned, Personally Enabled)|CYOD (Choose Your Own Device)|COBO (Corporate-Owned, Business Only)|1|COPE (Corporate-Owned, Personally Enabled) provides employees corporate-owned devices with permission for limited personal use, balancing employee convenience with corporate control. Organization owns device, installs MDM, enforces security policies, but allows personal apps/accounts. Benefits: full control, standardized hardware, can wipe entire device. Challenges: privacy concerns, personal data in corporate backups. Contrast: BYOD (employee-owned personal devices), CYOD (employees choose from approved corporate devices), COBO (strictly business use no personal), COSU (Corporate-Owned, Single Use for kiosks/point-of-sale).|4.0|4.1
What MDM feature uses GPS to trigger actions when devices enter or exit geographic areas?|Push notifications|Geofencing|Remote wipe|App containerization|1|Geofencing uses GPS/cellular triangulation to define virtual boundaries triggering automated actions when devices cross them. Use cases: (1) Enable/disable features (disable camera in secure facilities, enable VPN when leaving office), (2) Compliance enforcement (alert if devices enter restricted countries, compliance zone restrictions), (3) Security alerts (notify if device leaves authorized area), (4) Contextual access (require additional authentication outside geofence). Privacy consideration: tracks employee location. Tools: Intune, MobileIron, AirWatch (now Workspace ONE), Jamf for iOS/macOS. Geofencing complements other MDM features like containerization (separates work/personal data), remote wipe, and app distribution.|4.0|4.1
Which patch classification addresses publicly known vulnerabilities with available exploits requiring urgent deployment?|Feature updates|Critical security patches|Optional updates|Driver updates|1|Critical security patches address severe vulnerabilities with high likelihood of exploitation, often with public proof-of-concept code or active attacks. Microsoft classifies updates: Critical (remote code execution, immediate action), Important (data theft/integrity compromise, deploy quickly), Moderate (mitigated by config/defense-in-depth), Low (minimal impact). Prioritize: (1) Critical patches for internet-facing systems, (2) Patches for actively exploited vulnerabilities (CISA KEV catalog), (3) Important patches for critical assets. Example: Windows SMB vulnerability patches after WannaCry 2017 outbreak were critical. Balance urgency against testing - zero-day patches may skip normal staging.|4.0|4.1
What hardening technique removes or disables unnecessary default user accounts?|Account proliferation|Default account removal|Shared account creation|Guest account activation|1|Default account removal disables or renames built-in accounts that ship with systems, which attackers know and target. Examples: (1) Windows: disable/rename Guest account, rename local Administrator to non-obvious name, disable default ASPNET/IUSR accounts if not needed, (2) Linux: disable/remove default accounts like games, sync, news, (3) Network devices: change default admin account, disable HTTP/Telnet management. Attackers target default accounts with default passwords (admin/admin, root/password). Even disabled accounts should have strong passwords preventing reactivation. Document all account changes for troubleshooting. Complement with principle of least privilege for remaining accounts.|4.0|4.1
Which secure boot feature verifies operating system integrity during startup using cryptographic signatures?|Fast boot|UEFI Secure Boot|Legacy BIOS boot|Quick boot|1|UEFI Secure Boot validates OS bootloader and kernel signatures against trusted certificates before loading, preventing rootkits and bootkits from loading at startup. Boot process: (1) UEFI firmware checks bootloader signature against Platform Key (PK) and Key Exchange Keys (KEK), (2) Bootloader checks kernel signature, (3) Kernel loads only signed drivers. Secure Boot protects against: rootkits (persistent low-level malware), bootkits (MBR/bootloader malware), evil maid attacks (physical access malware installation). Challenges: Linux distributions need signed bootloaders (Microsoft signed shim), custom kernels require adding keys to UEFI, some legacy hardware incompatible. Complement with TPM attestation and full disk encryption.|4.0|4.1
What wireless security feature hides the network name from casual discovery by not broadcasting SSID?|MAC filtering|SSID broadcast disabling|WPA3 encryption|802.1X authentication|1|SSID broadcast disabling (also called SSID hiding or cloaking) prevents wireless access points from advertising network name in beacon frames, hiding networks from casual discovery in wireless network lists. Security value is limited - SSIDs are still visible in probe requests/responses, and tools like Wireshark, Kismet, or inSSIDer easily detect hidden networks. Better wireless security: (1) WPA3 encryption (mandatory, replaces WPA2), (2) Strong pre-shared keys (20+ random characters), (3) 802.1X authentication with RADIUS (enterprise), (4) MAC filtering (adds minor difficulty), (5) Disable WPS (vulnerable to brute force). SSID hiding may slightly slow attackers but provides security through obscurity, not defense-in-depth.|4.0|4.1
Which Windows security baseline tool automates applying CIS or DISA STIG hardening configurations?|Manual registry editing|Security Compliance Toolkit (SCT)|Group Policy Editor alone|Notepad configuration files|1|Security Compliance Toolkit (SCT) from Microsoft provides tools to download, analyze, test, and deploy security baselines (Microsoft security baselines, CIS Benchmarks, DISA STIGs). Includes: (1) Policy Analyzer compares GPOs against baselines, (2) LGPO.exe applies settings via command line for automation, (3) Pre-built GPO backups for various Windows versions/roles. Benefits: automates baseline application, ensures consistency, integrates with deployment tools (MDT, SCCM), validates compliance. Process: (1) Download appropriate baseline, (2) Review and customize for environment, (3) Test in lab, (4) Import GPO backup to production AD, (5) Link to appropriate OUs, (6) Verify with gpresult or Policy Analyzer. Alternative tools: PowerSTIG, Ansible, Chef, Puppet for automated compliance.|4.0|4.1
What application security technique allows only explicitly approved applications to execute?|Blacklisting/deny listing|Application whitelisting/allow listing|Antivirus scanning|Heuristic analysis|1|Application whitelisting (now called allow listing) permits only explicitly approved applications to run, blocking all others by default (default-deny). More secure than blacklisting which blocks known-bad applications but allows unknown malware. Implementation approaches: (1) Path-based (allow from C:\Program Files), easily bypassed, (2) Hash-based (allow specific file hashes), breaks with updates, (3) Publisher certificate-based (allow Microsoft-signed apps), balances security and manageability, (4) Intelligent (combines approaches). Challenges: administrative overhead, user frustration, software update management. Tools: Windows AppLocker (GPO-managed), Windows Defender Application Control (WDAC, kernel-level), Linux AppArmor/SELinux. Essential for high-security environments and servers.|4.0|4.1
Which mobile security feature automatically locks device after period of inactivity?|Biometric authentication|Screen lock timeout|Remote wipe|Full device encryption|1|Screen lock timeout automatically locks device screen after configured idle period (typically 1-15 minutes), requiring re-authentication to access. Balances security (prevents unauthorized access if device left unattended) against convenience (shorter timeout more annoying). MDM policies enforce maximum timeout preventing users from disabling or extending beyond acceptable limits. Combine with: (1) Strong unlock method (6+ digit PIN, complex password, biometrics with PIN fallback), (2) Limited failed attempts before wipe (typically 10 attempts), (3) Display timeout separate from lock timeout, (4) Lock immediately on sleep/power button for sensitive roles. Shorter timeouts (1-2 min) for executives/healthcare, longer (5-15 min) for general users.|4.0|4.1
What firmware security feature stores cryptographic keys and performs encryption operations in hardware?|Software encryption|Trusted Platform Module (TPM)|BIOS passwords|Boot passwords|1|Trusted Platform Module (TPM) is dedicated hardware chip (or firmware implementation) providing: (1) Secure key generation and storage (keys never leave TPM in plaintext), (2) Cryptographic operations (encryption/decryption/signing), (3) Platform integrity measurement (boot component hashing), (4) Secure storage for secrets. Use cases: BitLocker full disk encryption (seals keys to TPM, releases only for valid boot state), device attestation (proves device health to remote systems), credential protection (Windows Credential Guard), certificate storage. TPM versions: TPM 1.2 (legacy), TPM 2.0 (current standard, Windows 11 required). Security benefits: protection against offline attacks, key extraction resistance, boot integrity validation. Firmware TPM (fTPM) uses CPU firmware instead of discrete chip, slightly less secure but widely available.|4.0|4.1
Which Linux hardening technique implements mandatory access controls beyond traditional permissions?|chmod permissions only|SELinux or AppArmor|User accounts|Firewall rules|1|SELinux (Security-Enhanced Linux) and AppArmor implement Mandatory Access Control (MAC) confining programs to minimum required privileges, preventing exploitation damage even if vulnerabilities exist. SELinux: (1) Labels all resources (files, processes, ports) with security contexts, (2) Policy defines allowed interactions, (3) Three modes: Enforcing (blocks violations), Permissive (logs violations), Disabled. (4) Red Hat/CentOS/Fedora default. AppArmor: (1) Simpler profiles define per-program capabilities, (2) Two modes: Enforce, Complain (log-only), (3) Ubuntu/SUSE default. Benefits: limits damage from compromised applications (web server can't read /etc/shadow), prevents privilege escalation, defense-in-depth. Challenges: complex policies, may block legitimate operations, debugging audit logs. Complement traditional DAC (discretionary access control) via chmod/chown.|4.0|4.1
What MDM capability selectively wipes only corporate data while preserving personal data when employee leaves?|Full device wipe|Selective wipe/corporate wipe|Factory reset|Physical destruction|1|Selective wipe (also called corporate wipe or enterprise wipe) removes only corporate data, apps, email accounts, and certificates while preserving employee's personal photos, contacts, and apps. Triggered when: employee leaves/retires, device stolen/lost (after failed location attempts), policy violations, enrollment removal. Implementation varies: (1) Containerized approach removes entire work container with all work data, (2) MDM-managed content removal deletes only MDM-installed apps/profiles/email. Contrast full wipe (factory reset, all data deleted, use when company-owned or severe security incident). Privacy advantage: respects personal data on BYOD devices. Limitations: depends on effective containerization, personal backups may contain work data, encrypted corporate containers more secure. Tools: Intune, Workspace ONE, MobileIron, Jamf.|4.0|4.1
Which patch deployment strategy automatically installs updates on schedule with minimal user interaction?|Manual installation by users|Automatic deployment via patch management system|Ignore updates|Wait for vendor notification|1|Automatic deployment via patch management system schedules and installs updates with minimal user interaction, ensuring timely patching and consistent configurations. Workflow: (1) Centralized server downloads patches from vendors, (2) Administrators approve patches after testing, (3) System deploys to endpoints on schedule (typically during maintenance windows), (4) Agents report success/failure, (5) Dashboards show compliance. Tools: WSUS (free Windows updates), SCCM/Intune (Microsoft comprehensive), ManageEngine Patch Manager Plus, Ivanti, third-party: Chocolatey, Ninite for application patching. Benefits: reduces manual effort, ensures compliance, enforces deadlines, provides reporting. Configuration: automatic approval rules (security updates auto-approve, feature updates require review), maintenance windows (nights/weekends), bandwidth throttling, forced reboots with user warnings.|4.0|4.1
What hardening practice stores passwords as cryptographic hashes with salts instead of plaintext?|Plaintext storage|Hashed and salted storage|Encrypted reversible storage|Base64 encoding|1|Hashed and salted password storage applies one-way cryptographic hash functions (bcrypt, scrypt, Argon2, PBKDF2) with unique random salts before storage, preventing plaintext password disclosure if database compromised. Process: (1) User creates password, (2) Generate unique random salt (16+ bytes), (3) Combine password + salt, (4) Apply hash function with iterations/work factor, (5) Store hash + salt (plaintext password immediately discarded). Login: hash provided password with stored salt, compare hashes. Salt prevents: rainbow table attacks (precomputed hash tables), identical password detection (same passwords produce different hashes). Hash algorithms: bcrypt (popular, adjustable work factor), Argon2 (modern, memory-hard, 2015 winner), scrypt (memory-hard), PBKDF2 (standard, less secure). Avoid: SHA-256/MD5 (too fast), reversible encryption (keys can be stolen), plaintext (catastrophic). Examples of plaintext breaches: LinkedIn 2012 (6.5M passwords), Adobe 2013 (150M).|4.0|4.1
Which wireless security vulnerability allows attackers to intercept WPA2 handshakes and crack weak passwords offline?|MAC spoofing|KRACK attack|WPS PIN cracking|PSK brute force offline attack|3|PSK (Pre-Shared Key) offline brute force attacks capture WPA2 4-way handshakes using tools like airodump-ng, then use dictionary/brute force offline with hashcat or aircrack-ng to crack weak passphrases. Unlike online attacks limited by rate limiting, offline attacks test billions of passwords per second using GPUs. Mitigation: (1) Use strong PSK (20+ random characters, avoid dictionary words), (2) WPA3 with SAE (Simultaneous Authentication of Equals) prevents offline attacks via forward secrecy, (3) Enterprise 802.1X with RADIUS eliminates shared keys, (4) Disable WPS (vulnerable to PIN brute force in 4-8 hours). KRACK (Key Reinstallation Attack) was WPA2 protocol vulnerability patched 2017. Attackers deauth clients forcing handshake captures. Hashes from 4-way handshake contain enough to verify passwords without AP access.|4.0|4.1
What MDM feature distributes and installs applications remotely without physical device access?|Manual installation|Over-The-Air (OTA) app deployment|USB sideloading|Email attachments|1|Over-The-Air (OTA) app deployment remotely pushes, installs, updates, and removes applications on enrolled devices without physical access or user action. Capabilities: (1) Install required corporate apps automatically upon enrollment, (2) Push updates silently (security patches, features), (3) Remove apps remotely (when employee leaves or app vulnerable), (4) Distribute in-house apps without public app stores (enterprise app stores). Platform specifics: iOS Volume Purchase Program (VPP) for license management, Android managed Google Play, Windows Microsoft Store for Business. Benefits: ensures consistent app versions, deploys critical updates immediately, reduces helpdesk burden. MDM can also: prevent installation of unapproved apps (blocklist), require apps (email/VPN clients), configure app settings via managed app configurations. Complement with Mobile Application Management (MAM) for app-level security policies.|4.0|4.1
Which database hardening technique removes or disables unused stored procedures, functions, and sample data?|Installing all features|Database footprint reduction|Enabling guest access|Using default configurations|1|Database footprint reduction removes unnecessary features, sample databases (Northwind, AdventureWorks for SQL Server), stored procedures, functions, extended stored procedures (xp_cmdshell allows OS command execution), and default accounts reducing attack surface. Steps: (1) Drop sample databases (contain no production data, may have vulnerabilities), (2) Disable xp_cmdshell and other extended stored procedures allowing OS access, (3) Remove unused features (SQL Server Reporting Services if not needed), (4) Disable SQL Server Agent if not using jobs, (5) Remove INFORMATION_SCHEMA and sys access for non-admins. Principle of least functionality - every enabled feature is potential attack vector. Common vulnerabilities: xp_cmdshell enables OS command execution, OPENROWSET allows reading arbitrary files, linked servers enable lateral movement. Audit remaining functionality, apply least privilege to database accounts.|4.0|4.1
What network security technique isolates unpatched or vulnerable systems to limit potential damage?|Full connectivity|Network segmentation and isolation|Internet exposure|Shared network access|1|Network segmentation and isolation places vulnerable systems (legacy/unpatched) in separate network segments with restricted access, limiting blast radius if compromised. Isolation strategies: (1) Air-gapped (physically disconnected, highest security for ICS/SCADA), (2) Separate VLAN with firewall rules allowing only required traffic, (3) Micro-segmentation with zero trust (least privilege between all systems). Use cases: Legacy Windows XP systems running critical applications can't be patched, isolate from internet and modern systems. Medical devices with embedded unpatched OSes, segment with ACLs permitting only EMR traffic. Industrial control systems, air-gap or heavily restrict. Compensating controls for unsupported systems: network isolation, host-based firewalls, application whitelisting, enhanced monitoring, intrusion prevention. Example: WannaCry 2017 spread via SMBv1 - segmentation would have contained lateral movement.|4.0|4.1
Which Windows hardening technique removes unnecessary Windows features and capabilities?|Install all features|Remove Roles and Features|Enable all services|Add optional components|1|Remove Roles and Features uses Server Manager or PowerShell to uninstall unnecessary Windows components (IIS if not a web server, print services if not a print server, SMBv1 protocol vulnerable to WannaCry), reducing attack surface and improving performance. GUI: Server Manager → Remove Roles and Features. PowerShell: Uninstall-WindowsFeature, Get-WindowsFeature to list installed. Desktop: Control Panel → Programs → Turn Windows features on or off, or DISM command-line. Critical removals: (1) SMBv1 (vulnerable, exploited by WannaCry/NotPetya), (2) PowerShell v2 (lacks security features), (3) Legacy protocols (Telnet Client), (4) Internet Explorer mode if not needed, (5) Print Spooler (PrintNightmare vulnerability) on non-print servers. Document removed features for troubleshooting. Complement with service minimization (disable rather than remove for easier reversal). Principle of least functionality - minimal installation reduces patching requirements and vulnerability exposure.|4.0|4.1
What mobile security feature wipes device after specified number of failed authentication attempts?|Unlimited attempts|Maximum failed authentication wipe|Biometric-only authentication|No authentication|1|Maximum failed authentication wipe automatically performs full device wipe (factory reset) after configured number of consecutive failed unlock attempts (typically 10), protecting against brute force attacks. Balance security against accidental wipes (children playing, pocket touches). Implementation: iOS automatically enables with passcode (10 attempts), Android via MDM policies, Windows phones (legacy). MDM enforces organization policies preventing users from disabling. Warning: some attackers use as denial-of-service against executives by intentionally triggering wipe. Alternatives: exponentially increasing delays between attempts (1 min, 5 min, 15 min), permanent lock requiring admin unlock, remote wipe via MDM. Critical for devices with sensitive data, executives, healthcare, legal. Ensure regular backups before deployment. Consider biometric authentication (fingerprint/face) with secure PIN fallback reducing failed attempts from forgotten passwords.|4.0|4.1
Which hardening technique restricts USB port usage to prevent unauthorized data transfer and malware introduction?|Unrestricted USB access|USB port blocking/device control|Enable autorun|Allow all devices|1|USB port blocking/device control uses Group Policy, device management software, or physical locks to restrict USB device usage, preventing: (1) Data exfiltration via USB drives (insider threats, accidental disclosure), (2) Malware introduction (Stuxnet used USB, many attacks leverage USB autorun), (3) Unauthorized hardware (keyloggers, USB network adapters bypassing controls). Implementation levels: (1) Physical: USB port blockers, epoxy filling, BIOS disable, (2) Software: Group Policy whitelist approved devices by serial number, block all removable storage, allow keyboards/mice only, (3) DLP monitors file copies to USB, (4) Endpoint security disables autorun/autoplay. Allow exceptions: approved encrypted USB drives for authorized users, specific devices by hardware ID. Alternative: USB data blockers (charge-only cables) for untrusted charging stations preventing juice jacking. High-security: disable USB entirely, use PS/2 keyboards/mice. USB attacks: BadUSB firmware reprogramming, USB Rubber Ducky keystroke injection, dropped USB social engineering.|4.0|4.1
What host-based firewall configuration blocks unnecessary inbound connections while allowing required services?|Allow all traffic|Default-deny with explicit allow rules|Block all traffic|No firewall|1|Default-deny with explicit allow rules configures host-based firewalls (Windows Defender Firewall, iptables, pf, nftables) to block all inbound connections except explicitly permitted services. Best practice approach: (1) Enable firewall on all network profiles (Domain, Private, Public), (2) Set inbound default to Block, (3) Create allow rules only for required services (RDP for management, application ports), (4) Allow outbound by default (less restrictive) or deny outbound with explicit rules (stricter). Windows: Configure via Group Policy applying organization-wide, create rules by port, program, or service. Linux iptables: default policy DROP, explicit ACCEPT rules for SSH/HTTP/S, save rules to persist across reboots. Benefits: limits exposure to port scans, prevents lateral movement during breaches, protects if vulnerable services accidentally start. Log blocked connections to detect attack attempts or troubleshoot legitimate traffic. Segment rules by network location (more restrictive on Public Wi-Fi, less restrictive on Domain). Test thoroughly to avoid blocking legitimate applications.|4.0|4.1
Which security technique disables BIOS/UEFI settings changes without password preventing boot order modifications?|No password protection|BIOS/UEFI password|Rely on OS security only|Physical locks only|1|BIOS/UEFI password (also called setup password or supervisor password) prevents unauthorized changes to firmware settings protecting: (1) Boot order (preventing booting from USB/CD to bypass OS security), (2) Secure Boot settings (disabling signature validation), (3) TPM configuration, (4) Hardware settings (disabling NICs, USB). Two password types: (1) Setup/Supervisor password - required to enter BIOS setup, (2) Power-on/User password - required at every boot. Attacks prevented: booting Linux live CD to reset Windows passwords, disabling Secure Boot to install rootkits, USB boot to access/modify files. Limitations: physical access allows battery removal or jumper reset on desktops (laptops harder), some boards have backdoor passwords. Complement with: physical security (locked rooms/cabinets), full disk encryption (protects even if attacker boots alternate OS), Secure Boot enabled, chassis intrusion detection. Essential for laptops, servers in colocation, shared-access systems. Document passwords in secure vault for helpdesk.|4.0|4.1
What registry security technique exports key security settings for backup and comparison against baseline?|Never backup registry|Registry snapshots and comparison|Delete registry frequently|Share registry publicly|1|Registry snapshots export registry hives to .reg files for backup, compliance validation, and comparison against security baselines detecting unauthorized changes. Methods: (1) Regedit export specific keys or entire registry, (2) reg export command for automation, (3) Group Policy create backups, (4) System Restore creates automatic snapshots, (5) Third-party tools (RegistryChangesView, RegShot) compare before/after. Use cases: (1) Backup before changes allowing rollback, (2) Compare against CIS Benchmark baseline detecting misconfigurations, (3) Forensics identifying malware persistence (Run keys, Services), (4) Change detection triggering alerts. Important registry security keys: Run keys (persistence), Services (malicious services), Winlogon (authentication hijacking), AppInit_DLLs (DLL injection), ASEP (Auto-Start Extension Points). Tools: Microsoft Security Compliance Toolkit's Policy Analyzer compares registry settings against baselines, PowerShell scripts automate comparison. Schedule regular exports, store securely offsite. File Integrity Monitoring (FIM) tools continuously monitor registry changes.|4.0|4.1
Which mobile security feature prevents installation of applications from sources other than official app stores?|Sideloading allowed|App store restriction/disable sideloading|Jailbreaking encouraged|No app management|1|App store restriction (disabling sideloading) requires applications install only from official curated stores (Apple App Store, Google Play Store, Microsoft Store) preventing installation from untrusted sources that may contain malware. iOS default behavior, no sideloading without jailbreak (enterprise apps via MDM exception). Android allows sideloading by default but MDM policies can disable "Unknown Sources" preventing .apk installation outside Google Play. Enterprise options: private/enterprise app stores for internal apps, managed Google Play/Apple Business Manager. Benefits: (1) App vetting by store (malware scanning, policy compliance), (2) Automatic updates from trusted source, (3) App permissions review, (4) Reduced malware risk. Limitations: sophisticated malware occasionally bypasses vetting (discovered and removed), nation-state attackers compromise developers. Trade-off: flexibility vs security - power users want sideloading, enterprises want control. Sideloading risks: Trojans disguised as popular apps, modified apps with malware, expired certificates, no updates.|4.0|4.1
What database auditing feature logs all queries and access attempts for security monitoring and compliance?|No logging|Database activity monitoring (DAM) and audit logs|Trust all queries|Disable monitoring|1|Database Activity Monitoring (DAM) and audit logs capture all database queries, connections, access attempts, schema changes, and administrative actions providing: (1) Security monitoring (detecting SQL injection, unusual queries, unauthorized access), (2) Compliance auditing (HIPAA, PCI DSS, SOX require database access logs), (3) Forensics (investigating breaches, identifying attacker actions), (4) Insider threat detection (DBAs accessing sensitive tables). What to log: successful/failed authentication, SELECT on sensitive tables, INSERT/UPDATE/DELETE/TRUNCATE, CREATE/ALTER/DROP schema changes, privilege grants. Database-native: SQL Server Audit, Oracle Audit Vault, MySQL binary logs, PostgreSQL pgAudit. Third-party DAM: Imperva, IBM Guardium, McAfee Database Security. Challenges: performance overhead (5-20%), massive log volumes (requires log management/SIEM), sensitive data in logs (encrypt logs). Forward logs to centralized SIEM for correlation. Retention: 1+ years for compliance, immutable storage prevents tampering.|4.0|4.1
Which hardening technique removes detailed error messages from web applications preventing information disclosure?|Detailed stack traces to users|Custom error pages with minimal info|Display database errors|Show source code in errors|1|Custom error pages with minimal information replace detailed error messages (stack traces, database errors, file paths, version numbers) that assist attackers with reconnaissance and exploit development. Default errors reveal: framework versions (ASP.NET, PHP), database type/version, file paths, SQL query structure, server configuration. Attack leverage: tailor exploits to specific versions, identify injection points, map directory structure, find admin panels. Best practice: (1) Production: generic "An error occurred" message with reference ID, (2) Log detailed errors server-side for debugging, (3) Development: detailed errors acceptable, (4) Configure: PHP display_errors = Off, ASP.NET customErrors mode="On", Java error-page in web.xml. Custom error pages: 404 (not found), 500 (server error), 403 (forbidden) - consistent branding, no technical details, support contact. Examples of vulnerability: SQL errors showing table names enable SQL injection, path disclosure aids traversal attacks, version info identifies known vulnerabilities. Security through obscurity isn't defense but reduces reconnaissance information.|4.0|4.1
What Linux command-line tool configures the default-deny firewall ruleset with explicit allow exceptions?|iptables or nftables|tcpdump|netstat|ping|0|iptables (legacy) or nftables (modern replacement) configure Linux kernel firewall (netfilter) with default-deny policy and explicit allow rules. Common workflow: (1) Set default policy DROP for INPUT chain (iptables -P INPUT DROP), (2) Allow established connections (iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT), (3) Allow SSH (iptables -A INPUT -p tcp --dport 22 -j ACCEPT), (4) Allow required services (HTTP/HTTPS), (5) Log dropped packets for monitoring (iptables -A INPUT -j LOG), (6) Save rules to persist (iptables-save > /etc/iptables/rules.v4). nftables modern syntax: nft add rule ip filter input drop, unified IPv4/IPv6. firewalld front-end simplifies iptables management on Red Hat/CentOS. ufw (Uncomplicated Firewall) Ubuntu-friendly wrapper. Display rules: iptables -L -v -n (numeric, verbose). Testing: don't lock yourself out - allow SSH before setting default DROP, test from another terminal, use serial console or out-of-band management.|4.0|4.1
Which Windows security feature encrypts individual files using certificates allowing access only to authorized users?|BitLocker|EFS (Encrypting File System)|Windows Defender|UAC|1|EFS (Encrypting File System) encrypts individual files and folders using user's certificate and keys, providing file-level encryption on NTFS volumes. Transparent to authorized user (automatically decrypts), inaccessible to others even with physical access. Use cases: (1) Protect sensitive files on shared computers, (2) Supplement BitLocker with file-level granularity, (3) Encrypt specific folders like Documents. How it works: (1) File encrypted with symmetric FEK (File Encryption Key), (2) FEK encrypted with user's public key from certificate, (3) Decryption uses user's private key from profile. Limitations: (1) Unencrypted when user logged in (memory, temp files), (2) No protection if attacker has user's password, (3) Lost certificate = lost data (export certificates), (4) Doesn't encrypt metadata (filename, size). Alternatives: BitLocker for full disk encryption, third-party tools (VeraCrypt). Access via: File properties → Advanced → Encrypt contents. Share encrypted files: add other users' certificates. Green filename indicates EFS encryption.|4.0|4.1
What secure coding practice validates and sanitizes all user input preventing injection attacks?|Trust all input|Input validation and sanitization|Execute input directly|Accept any format|1|Input validation and sanitization examines all user input ensuring it matches expected format, length, and character set before processing, preventing injection attacks (SQL, command, LDAP, XSS). Two approaches: (1) Allowlisting (preferred) - accept only known-good patterns (digits only for ZIP codes, regex for email), reject anything else, (2) Denylisting (weak) - block known-bad characters/patterns (blocked strings easily bypassed with encoding). Validation: check data type, length, range, format (regex). Sanitization: encode/escape special characters for context (HTML entity encoding for web, parameterized queries for SQL). Validate: client-side (UX, never trust), server-side (security, always required). Examples: (1) SQL injection: use prepared statements/parameterized queries never concatenate input into queries, (2) XSS: HTML encode output, (3) Command injection: avoid system calls or use safe APIs. OWASP validation regex library, frameworks provide built-in validation. Defense in depth: input validation + parameterized queries + least privilege database accounts.|4.0|4.1
Which mobile security technology creates encrypted secure container separating work and personal data?|Shared storage|Workspace/app containerization|Single profile|No separation|1|Workspace/app containerization creates encrypted isolated container on device separating corporate data/apps from personal, managed independently by MDM. Architecture: (1) Work profile (Android) or managed apps (iOS) with separate credentials, (2) Encrypted storage preventing personal apps from accessing work data, (3) Separate app stores (managed Google Play), (4) Independent policies (work apps can require VPN, personal apps don't). Benefits: (1) Privacy - organization can't see personal data/apps/browsing, (2) Security - corporate wipe removes only work container, (3) DLP - copy/paste between work/personal controlled, (4) Compliance - work data encrypted with organization keys. Implementations: Android Enterprise work profile (briefcase icon), iOS Managed Apps, Samsung Knox, BlackBerry Dynamics, MobileIron AppConnect. Contrast: BYOD without containerization requires full device control raising privacy concerns, company-owned devices allow full wipe. Containerization enables BYOD by protecting corporate data while respecting employee privacy.|4.0|4.1
What server hardening technique runs each service under dedicated low-privilege account instead of root or SYSTEM?|Run everything as root|Service accounts with least privilege|Share administrator account|Use guest account for services|1|Service accounts with least privilege creates dedicated accounts for each service with only required permissions, limiting damage if service compromised. Linux: avoid running services as root, create service-specific accounts (www-data for Apache, mysql for MySQL) with no shell (/bin/nologin), minimal file access (only /var/www or /var/lib/mysql), no sudo privileges. Windows: avoid Local System (most privilege), use Virtual Service Accounts (NT SERVICE\ServiceName) for IIS/SQL or Group Managed Service Accounts (gMSAs) for cross-server services with auto password management. Benefits: (1) Lateral movement prevention - compromised web server can't read database files, (2) Privilege escalation harder, (3) Audit trails per service, (4) Defense in depth. Configure service permissions: Linux setcap for specific capabilities without full root, Windows service permissions in Services.msc. Document service account requirements for troubleshooting. Principle of least privilege - services shouldn't need admin/root unless absolutely required.|4.0|4.1
Which patch management metric tracks percentage of systems with current security updates applied?|Mean time to patch|Patch compliance rate|Total patches released|Vulnerability count|1|Patch compliance rate measures percentage of systems with required security patches applied within SLA timeframes (e.g., 95% of systems patched within 30 days of critical patch release). Calculated: (Systems patched / Total systems requiring patch) × 100. Why important: (1) Quantifies security posture, (2) Tracks patch management effectiveness, (3) Compliance reporting (PCI DSS requires patch metrics), (4) Identifies problem systems/departments. Target: 95%+ for critical patches within 30 days, 98%+ for important within 60 days. Track separately: patch types (OS vs application), severity (critical vs important), system categories (servers vs workstations). Challenges: offline systems, unmanaged devices, compatibility issues. Tools: WSUS/SCCM compliance reports, patch management solutions provide dashboards. Complement with: Mean Time To Patch (MTTP - average days from release to deployment), missing patch count, vulnerability window. Trend over time shows improvement or degradation. Exception tracking for systems that can't patch.|4.0|4.1
What hardening technique configures systems to require minimum password length and complexity?|No password requirements|Password policy enforcement|Allow blank passwords|Single character passwords|1|Password policy enforcement configures and enforces password requirements preventing weak passwords that enable brute force attacks. Common policies: (1) Length (minimum 12-16 characters, NIST recommends 8+ but longer better), (2) Complexity (uppercase, lowercase, digits, symbols - less emphasis in NIST SP 800-63B), (3) History (prevent reuse of last 24 passwords), (4) Age (maximum 90 days but NIST no longer recommends forced expiration without evidence of compromise), (5) Lockout (5-10 failed attempts, lockout duration 15-30 min). Implementation: Active Directory Group Policy, Linux PAM (Pluggable Authentication Modules), password management tools. Current best practice shift: favor passphrases (correcthorsebatterystaple - long, memorable, no forced complexity), allow password managers, eliminate forced rotation creating predictable patterns (Summer2024!), check against breach lists (Have I Been Pwned, NIST 800-63B recommends). Complement with MFA reducing password attack effectiveness. Balance security against usability (overly complex policies lead to written-down passwords).|4.0|4.1
Which email security technique verifies sender domain legitimacy using DNS records?|Accept all senders|SPF, DKIM, DMARC validation|No verification|Trust all emails|1|SPF (Sender Policy Framework), DKIM (DomainKeys Identified Mail), and DMARC (Domain-based Message Authentication, Reporting & Conformance) validate sender legitimacy reducing phishing and spoofing. SPF: DNS TXT record lists authorized sending servers for domain, receiving server checks sending IP against list, reject if unlisted. DKIM: cryptographic signature in email header verified against public key in DNS, confirms message unmodified and from authorized sender. DMARC: policy in DNS specifies SPF/DKIM handling failures (none/quarantine/reject), alignment checks, reporting for visibility. Implementation: (1) Publish records in DNS (SPF: v=spf1 ip4:192.0.2.0/24 -all, DKIM: public key, DMARC: v=DMARC1; p=quarantine), (2) Configure email server validation, (3) Monitor reports. Benefits: prevents domain spoofing (CEO fraud), reduces phishing emails appearing from legitimate domains, improves deliverability. Limitations: doesn't verify message content, sophisticated phishing uses similar domains, internal email may bypass. 70%+ of phishing uses spoofed domains - SPF/DKIM/DMARC significantly reduces effectiveness.|4.0|4.1
What hardening practice disables or removes sample code, development tools, and debugging features from production systems?|Install all development tools|Remove development/debug features|Enable verbose logging|Activate debug mode|1|Remove development/debug features eliminates sample applications, debug modes, verbose error messages, development tools, and default content from production systems reducing information disclosure and attack surface. Remove: (1) Web servers: sample sites (IIS sample apps, Apache test pages), default welcome pages listing server info, (2) Application servers: sample apps (JBoss admin console, Tomcat manager), debug modes exposing stack traces, (3) Databases: sample databases (Northwind, AdventureWorks), xp_cmdshell, (4) Development tools: compilers, debuggers, source code, (5) Documentation: READMEs revealing version/configs. Disable: verbose error messages (show generic errors to users, log details server-side), debugging features (Java remote debugging, .NET debug mode), test accounts. Why: attackers leverage samples for known vulnerabilities, debug output reveals internal paths/versions/logic, test accounts have weak passwords. Verify with scanners (Nessus checks default content), manual review. Principle: production systems should contain only required operational code, no development artifacts.|4.0|4.1
Which wireless security technique limits connections to approved device MAC addresses?|Allow all devices|MAC address filtering|Open authentication|WEP encryption|1|MAC address filtering maintains allow list or deny list of device MAC addresses on wireless access point, permitting or blocking connections based on hardware address. Implementation: AP admin interface add approved MAC addresses to allow list, configure to reject unlisted devices (whitelist mode) or block specific devices (blacklist mode). Security value: minimal - MAC addresses easily spoofed using tools like macchanger (Linux) or registry edit (Windows), visible in wireless traffic even on encrypted networks, adds administrative burden. Better security: (1) WPA3 encryption (mandatory), (2) 802.1X authentication with RADIUS (enterprise), (3) Strong PSK (20+ characters), (4) Client certificates, (5) Network segmentation. MAC filtering appropriate for: (1) Defense in depth - minor obstacle for attackers, (2) Compliance requirements, (3) Asset management (track connected devices), (4) IoT device control (many IoT can't do 802.1X). Limitations: tedious maintenance (adding laptops/phones/guests), false sense of security if relied upon alone. Complement with proper encryption and authentication, not replacement.|4.0|4.1
What mobile app security technique wraps existing apps with additional security policies without modifying source code?|Recompiling apps|App wrapping|Source code changes|Uninstalling apps|1|App wrapping injects security policies into existing mobile applications without source code access or recompilation by encapsulating app in security layer (wrapper). Process: MDM admin uploads app binary (.ipa for iOS, .apk for Android), wrapping tool injects security framework, produces wrapped app for distribution. Policies applied: (1) Data encryption at rest, (2) VPN enforcement (route app traffic through corporate VPN), (3) Authentication (require PIN/biometric), (4) Data loss prevention (disable copy/paste, screenshot, printing), (5) Conditional access (require managed device). Use cases: third-party apps without native MDM support, legacy apps, quick deployment without developer involvement. Limitations: (1) May break some app functionality, (2) App updates require re-wrapping, (3) Less granular than SDK integration, (4) Potential incompatibilities. Alternatives: MAM SDKs (developer integrates security framework, more stable but requires code access), containerization (whole container has policies). Tools: MobileIron AppConnect, VMware Workspace ONE, Microsoft Intune.|4.0|4.1
Which Windows feature enforces secure configurations by restricting registry and file system changes to approved paths?|Run everything as admin|Windows Integrity Control / Mandatory Integrity Control (MIC)|Disable all restrictions|Grant full access|1|Windows Integrity Control (also called Mandatory Integrity Control - MIC) assigns integrity levels to processes and objects preventing lower integrity processes from writing to higher integrity locations. Four levels: System (kernel, system services), High (administrators), Medium (standard users), Low (sandboxed apps like browsers). Protected locations: HKLM registry (High), Program Files (High), user profile (Medium). Low integrity processes (Internet Explorer Protected Mode, sandboxed apps) can only write to Low integrity temp folders preventing malware from installing persistently. Attacks prevented: downloaded malware can't modify registry Run keys, browser exploit can't install drivers, drive-by download can't modify system files. View integrity: icacls file shows Mandatory Label. Set low integrity: icacls file /setintegritylevel low. Browsers: IE Protected Mode, Chrome/Edge sandboxing use low integrity. Complement User Account Control (UAC) prompting for High integrity actions. Windows Vista+ mandatory part of security model providing defense-in-depth against privilege escalation.|4.0|4.1
What server hardening technique removes or disables web server directory listing preventing reconnaissance?|Enable directory browsing|Disable directory indexing/listing|List all directories|Auto-index files|1|Disable directory indexing/listing prevents web servers from displaying folder contents when no index file (index.html, default.aspx) exists, preventing information disclosure and reconnaissance. Default behavior varies: Apache Options -Indexes in .htaccess or httpd.conf, IIS disable "Directory Browsing" in feature settings, nginx autoindex off in nginx.conf. Why disable: (1) Information disclosure - attacker sees backup files (.bak, ~), configuration files, directory structure, (2) Reconnaissance - identify targets (admin directories, upload folders), (3) Accidental exposure - developers leave temp files revealed. Attacks: attackers find unlinked pages, identify vulnerable versions from file timestamps, discover backup files with source code or credentials. Best practice: (1) Disable globally, (2) Ensure index files in all directories, (3) Remove backup/temp files from web root, (4) Use .htaccess deny for sensitive dirs (Apache), (5) File permissions prevent reading outside web root. Scanners (Nikto, Nessus) detect directory listing. Defense in depth - obscuring directory contents doesn't replace authentication, adds reconnaissance difficulty.|4.0|4.1
