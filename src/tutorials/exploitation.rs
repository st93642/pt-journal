pub const EXPLOITATION_STEPS: &[(&str, &str)] = &[
    (
        "Safe exploit validation",
        "OBJECTIVE: Verify that identified vulnerabilities can be safely exploited without causing damage.

STEP-BY-STEP PROCESS:
1. Vulnerability verification:
   - Confirm vulnerability exists and is exploitable
   - Test in isolated environment first
   - Verify exploit conditions and prerequisites

2. Impact assessment:
   - Determine potential damage from exploitation
   - Identify data at risk
   - Assess system availability impact

3. Safe exploitation planning:
   - Develop proof-of-concept exploits
   - Create exploitation scripts with safety checks
   - Plan for exploitation rollback if needed

4. Controlled testing:
   - Test exploits in development/staging environments
   - Use virtual machines or containers for isolation
   - Monitor system behavior during exploitation

5. Documentation and evidence:
   - Record exploitation process and results
   - Capture screenshots and network traffic
   - Document impact and recovery procedures

WHAT TO LOOK FOR:
- Reliable exploit methods
- Minimal collateral damage
- Clear exploitation prerequisites
- Safe rollback procedures

COMMON PITFALLS:
- Some exploits are unreliable or environment-specific
- Testing environments may differ from production
- Some exploits require specific timing or conditions
- Rollback may not always be possible"
    ),
    (
        "Credential testing",
        "OBJECTIVE: Test discovered or default credentials against identified services.

STEP-BY-STEP PROCESS:
1. Default credential testing:
   - Test common default credentials for each service
   - Use credential lists from SecLists or similar
   - Check vendor documentation for default passwords

2. Discovered credential validation:
   - Test credentials found during reconnaissance
   - Check password reuse across services
   - Verify credential validity and permissions

3. Brute force testing:
   - Use Hydra or Medusa for credential spraying
   - Test against common password lists
   - Implement rate limiting to avoid lockouts

4. Password policy assessment:
   - Test password complexity requirements
   - Check account lockout mechanisms
   - Verify password history enforcement

5. Credential documentation:
   - Record successful authentications
   - Note credential sources and context
   - Document access levels and permissions

WHAT TO LOOK FOR:
- Default credentials that haven't been changed
- Weak passwords that can be brute-forced
- Password reuse across different systems
- Accounts with excessive privileges

COMMON PITFALLS:
- Some systems have complex lockout policies
- Brute force may trigger security alerts
- Some credentials are intentionally weak for testing
- Multi-factor authentication can block credential testing"
    ),
    (
        "CVE exploitation",
        "OBJECTIVE: Attempt exploitation of identified CVEs with available exploits.

STEP-BY-STEP PROCESS:
1. Exploit research and preparation:
   - Research available exploits for identified CVEs
   - Download proof-of-concept code from Exploit-DB
   - Review exploit requirements and limitations

2. Exploit adaptation:
   - Modify exploits for target environment
   - Test exploits in isolated lab environment
   - Verify exploit reliability and stability

3. Controlled exploitation:
   - Execute exploits with monitoring in place
   - Capture evidence of successful exploitation
   - Document system state before and after

4. Post-exploitation assessment:
   - Verify level of access gained
   - Assess exploit reliability for repeated use
   - Document any system changes or artifacts

5. Evidence collection:
   - Screenshot exploitation process
   - Capture network traffic and logs
   - Document exploit code and modifications

WHAT TO LOOK FOR:
- Reliable public exploits
- Exploits that provide useful access
- Minimal system disruption
- Clear exploitation evidence

COMMON PITFALLS:
- Many public exploits are unreliable or outdated
- Target environment may differ from exploit assumptions
- Some exploits require specific conditions or versions
- Antivirus or EDR may detect exploit attempts"
    ),
    (
        "Web application exploitation",
        "OBJECTIVE: Exploit identified web application vulnerabilities.

STEP-BY-STEP PROCESS:
1. Vulnerability prioritization:
   - Rank web vulnerabilities by severity and exploitability
   - Focus on high-impact vulnerabilities first
   - Consider business context and risk tolerance

2. Exploit development:
   - Create custom exploits for unique vulnerabilities
   - Adapt public exploits to target environment
   - Test exploits in safe environment first

3. Exploitation execution:
   - Execute exploits with proper monitoring
   - Capture evidence of successful exploitation
   - Document impact and data accessed

4. Payload delivery:
   - Use appropriate payload types (reverse shell, webshell)
   - Ensure payload reliability and persistence
   - Test payload execution and cleanup

5. Impact documentation:
   - Record data accessed or modified
   - Document privilege escalation achieved
   - Note any persistent access established

WHAT TO LOOK FOR:
- SQL injection leading to data extraction
- XSS for session hijacking or defacement
- File inclusion for code execution
- Authentication bypass vulnerabilities

COMMON PITFALLS:
- Web application firewalls may block exploits
- Some vulnerabilities require specific user context
- JavaScript-heavy applications complicate exploitation
- Session management may limit exploit windows"
    ),
];